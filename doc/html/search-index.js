var searchIndex = JSON.parse('{\
"acceptance_tests_ghidra":{"doc":"This crate contains acceptance tests using Ghidra as a …","t":"RRDRRFLLLLLLLLLFFFFFFLLLLLF","n":["ARCHITECTURES","COMPILERS","CweTestCase","WINDOWS_ARCHITECTURES","WINDOWS_COMPILERS","all_test_cases","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","linux_test_cases","mark_architecture_skipped","mark_compiler_skipped","mark_skipped","new_test_cases","print_errors","run_test","to_owned","try_from","try_into","type_id","windows_test_cases"],"q":[[0,"acceptance_tests_ghidra"],[27,"alloc::vec"],[28,"core::fmt"],[29,"core::fmt"],[30,"alloc::string"],[31,"core::result"],[32,"core::any"]],"d":["CPU architectures contained in the test samples","Compilers contained in the test samples","A test case containing the necessary information to run an …","CPU architectures for the Windows-based test samples","Compilers used for the Windows-based test samples","Return a list of all possible test cases (Linux and …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return a list with all possible Linux test cases for the …","Mark test cases using the given CPU architecture as <code>skipped</code>…","Mark test cases using the given compiler as <code>skipped</code>.","Mark test cases using the given CPU architecture + …","Generate test cases for all combinations of CPU …","Print the error messages of failed checks. The <code>error_log</code> …","Run the test case and print to the shell, whether the test …","","","","","Return a list with all possible Windows test cases for the …"],"i":[0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,0],"f":[0,0,0,0,0,[[1,1],[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],4,[],[]],[[2,2],5],[[2,6],7],[-1,-1,[]],[[2,-1],4,8],[-1,-2,[],[]],[[1,1],[[3,[2]]]],[[[9,[2]],1],4],[[[9,[2]],1],4],[[[9,[2]],1,1],4],[[1,[9,[1]],[9,[1]],1],[[3,[2]]]],[[[3,[[4,[10,10]]]]],4],[[2,1,11],[[12,[4,10]]]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[1,1],[[3,[2]]]]],"c":[],"p":[[15,"str"],[3,"CweTestCase",0],[3,"Vec",27],[15,"tuple"],[15,"bool"],[3,"Formatter",28],[6,"Result",28],[8,"Hasher",29],[15,"slice"],[3,"String",30],[15,"usize"],[4,"Result",31],[3,"TypeId",32]],"b":[]},\
"cwe_checker":{"doc":"This crate defines the command line interface for the …","t":"DLLMMLLFLLMMFLLLLLLMFMMMMFMLLLLLM","n":["CmdlineArgs","augment_args","augment_args_for_update","bare_metal_config","binary","borrow","borrow_mut","check_file_existence","command","command_for_update","config","debug","filter_modules_for_partial_run","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","json","main","module_versions","out","partial","quiet","run_with_ghidra","statistics","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","verbose"],"q":[[0,"cwe_checker"],[33,"clap::builder::command"],[34,"alloc::string"],[35,"core::result"],[36,"cwe_checker_lib"],[37,"alloc::vec"],[38,"core::fmt"],[39,"core::fmt"],[40,"clap"],[41,"clap::util::id"],[42,"core::option"],[43,"anyhow"],[44,"core::any"]],"d":["Find vulnerable patterns in binary executables","","","Path to a configuration file for analysis of bare metal …","The path to the binary.","","","Return <code>Ok(file_path)</code> only if <code>file_path</code> points to an …","","","Path to a custom configuration file to use instead of the …","Output for debugging purposes. The current behavior of …","Only keep the modules specified by the <code>--partial</code> parameter …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Generate JSON output.","","Prints out the version numbers of all known modules.","Write the results to a file instead of stdout. This only …","Specify a specific set of checks to be run as a comma …","Do not print log messages. This prevents polluting stdout …","Run the cwe_checker with Ghidra as its backend.","Include various statistics in the log messages. This can …","","","","","","Print additional debug log messages."],"i":[0,8,8,8,8,8,8,0,8,8,8,8,0,8,8,8,8,8,8,8,0,8,8,8,8,0,8,8,8,8,8,8,8],"f":[0,[1,1],[1,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[2,[[4,[3,3]]]],[[],1],[[],1],0,0,[[[6,[5]],2],7],[[8,9],10],[-1,-1,[]],[11,[[4,[8,12]]]],[11,[[4,[8,12]]]],[[],[[14,[13]]]],[-1,-2,[],[]],0,[[],[[4,[7,15]]]],0,0,0,0,[8,[[4,[7,15]]]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[[8,11],[[4,[7,12]]]],[[8,11],[[4,[7,12]]]],0],"c":[],"p":[[3,"Command",33],[15,"str"],[3,"String",34],[4,"Result",35],[3,"CweModule",36],[3,"Vec",37],[15,"tuple"],[3,"CmdlineArgs",0],[3,"Formatter",38],[6,"Result",38],[3,"ArgMatches",39],[6,"Error",40],[3,"Id",41],[4,"Option",42],[3,"Error",43],[3,"TypeId",44]],"b":[]},\
"cwe_checker_install":{"doc":"This crate automates the installation of cwe_checker. It …","t":"DDLLLLLLLLFFFFLFLLLLLLFFMMLFLLFFFFFLLLLLLLFMLL","n":["CmdlineArgs","GhidraConfig","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","copy_config_json","copy_dir_all","copy_ghidra_plugin","create_ghidra_json","deserialize","find_ghidra","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","get_search_locations","get_user_choice","ghidra_path","ghidra_path","group_id","install_cwe_checker","into","into","is_good_ghidra_location","is_hidden","main","search_for_ghidrarun","select_ghidra_version","serialize","try_from","try_from","try_into","try_into","type_id","type_id","uninstall","uninstall","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"cwe_checker_install"],[46,"clap::builder::command"],[47,"std::path"],[48,"anyhow"],[49,"core::convert"],[50,"std::path"],[51,"serde::de"],[52,"core::fmt"],[53,"core::fmt"],[54,"clap"],[55,"alloc::vec"],[56,"clap::util::id"],[57,"core::option"],[58,"walkdir::dent"],[59,"serde::ser"],[60,"core::any"]],"d":["Installs cwe_checker","Structure for ghidra.json file","","","","","","","","","Copies src/config.json to specified location","Recursive copy of files and directories.","Copy src/ghidra to provided location.","Creates ghidra.json for a Ghidra location at provided …","","Returns None if Ghidra were not found. Else returns path …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns vector of os-specific locations","Determines Ghidra versions and provides selection …","Path to a ghidra installation.","Path to a ghidra installation","","Runs Cargo install to install cwe_checker.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if a path is a ghidra installation","check whether a path starts with “.”, indicating a …","","Searches for a file containing “ghidraRun” at provided …","Determines Ghidra versions and provides selection …","","","","","","","","Removes provided locations and uninstalls cwe_checker via …","If true, cwe_checker will be uninstalled.","",""],"i":[0,0,10,10,10,7,10,7,10,10,0,0,0,0,7,0,10,7,10,7,10,10,0,0,10,7,10,0,10,7,0,0,0,0,0,7,10,7,10,7,10,7,0,10,10,10],"f":[0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[2,[[4,[3]]]],[[-1,-2],[[4,[3]]],[[5,[2]]],[[5,[2]]]],[2,[[4,[3]]]],[[2,6],[[4,[3]]]],[-1,[[8,[7]]],9],[[],[[4,[6]]]],[[10,11],12],[[7,11],12],[-1,-1,[]],[-1,-1,[]],[13,[[8,[10,14]]]],[13,[[8,[10,14]]]],[[],[[15,[6]]]],[[[15,[6]]],[[4,[6]]]],0,0,[[],[[17,[16]]]],[[],[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,18],[19,18],[[],[[4,[3]]]],[2,[[15,[6]]]],[[[15,[6]]],[[4,[6]]]],[[7,-1],8,20],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[[2,2],[[4,[3]]]],0,[[10,13],[[8,[3,14]]]],[[10,13],[[8,[3,14]]]]],"c":[],"p":[[3,"Command",46],[3,"Path",47],[15,"tuple"],[6,"Result",48],[8,"AsRef",49],[3,"PathBuf",47],[3,"GhidraConfig",0],[4,"Result",50],[8,"Deserializer",51],[3,"CmdlineArgs",0],[3,"Formatter",52],[6,"Result",52],[3,"ArgMatches",53],[6,"Error",54],[3,"Vec",55],[3,"Id",56],[4,"Option",57],[15,"bool"],[3,"DirEntry",58],[8,"Serializer",59],[3,"TypeId",60]],"b":[]},\
"cwe_checker_lib":{"doc":"The main library of the cwe_checker containing all CWE …","t":"DGAALLALLFALMAAMLLLLAMIDDEEEEEEEDIDNNIDDDNIDDNNNIIINNNNNIIDNNNNNLLLLLLKLLLLLLKLLKLLKLLKLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLMMMMMMAAAAAAAAAAAAAIDQLLFFFLLKLLKLLKKKLLLKKKLKGFFFFDLLLLLLFLFFLLLLLLLLLDIQQQLLLLLLLKLLLLLKLLLLLLLKIDQLLFFFFFLLKLLKLLKLLLKKKLKKDDLLLLLLLLLLFLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLALLLLLLLLLLLLLFFFAFFFFFNNNNNNNNNENGNENLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLMMMMNENLLLLLLLLLLLFLLLLLLMMHDGDDGLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLALLLLLFLLLLLMLLLLLLLLLLLLLLDNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLALLLLLLMLLLLLLLLLLFLAMLLLLLLLDLLLMMLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLMLLLLLLMALLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIKKKKKAAAAAAAAAAAAAAAAAHFHDNNNENLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDLLFLLLLLLLLLLLLLLLLHFHDLLFLLLLLLLLLLLLLLLLHDLLFLLLLLLLLLLLLLLLLHDDLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHFHDDLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDLLFLLLLLLLLLLLLLLLLHDLLFLLLLLLLLLLLLLLLLHDLLFLLLLLLLLLLLLAALLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHHHFHDLLFLLLLLLLLLFFLLFLLLLLHDLLFFFLLLLLLLLLFLLLLLLHFFFHDLLFLLLLLLLLLLLLLLLLENNEGIDNNNNNNDNNNNDNENNEDENEDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNDDNNDNNNDNDDNNENNDLLLMMMLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMMMKLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLKLKLLLLLMLMMMMMMLLMMMMLLLLMLLMLLLLLMMLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLMLLKLKLKLMMLLKLMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDENNNNNNDNNNNNDDDNDEDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDENENNNDDNDNNDNDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLMLLLLMMMMMMLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDMLLLLLLLMFLMLLMMMLLLLLLLAAFFAAAFAFFFFFDDMLLLLMLLLLLLLLLLLLLLMMLLLLLLLLLLLLLFMMMMLLLLLLLLLLMFFNDNNNNEDDENFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLMLLLLFLLLLLMLLMMLMLLLLLLLLLLLLLLLLLLLLLMFFFF","n":["CweModule","CweModuleFn","abstract_domain","analysis","borrow","borrow_mut","checkers","fmt","from","get_modules","intermediate_representation","into","name","pcode","pipeline","run","to_string","try_from","try_into","type_id","utils","version","AbstractDomain","AbstractIdentifier","AbstractIdentifierData","AbstractLocation","AbstractMemoryLocation","BitvectorDomain","BrickDomain","BricksDomain","CharacterInclusionDomain","CharacterSet","DataDomain","DomainInsertion","DomainMap","GlobalAddress","GlobalPointer","HasTop","IntersectMergeStrategy","Interval","IntervalDomain","Location","MapMergeStrategy","MemRegion","MergeTopStrategy","Pointer","Pointer","Register","RegisterDomain","SizedDomain","SpecializeByConditional","Top","Top","Top","Top","Top","TryToBitvec","TryToInterval","UnionMergeStrategy","Value","Value","Value","Value","Value","add","add","add","add","add","add","add_not_equal_bound","add_not_equal_bound","add_not_equal_bound","add_offset","add_offset","add_offset_at_root","add_offset_to_all_indices","add_signed_greater_equal_bound","add_signed_greater_equal_bound","add_signed_greater_equal_bound","add_signed_less_equal_bound","add_signed_less_equal_bound","add_signed_less_equal_bound","add_unsigned_greater_equal_bound","add_unsigned_greater_equal_bound","add_unsigned_greater_equal_bound","add_unsigned_less_equal_bound","add_unsigned_less_equal_bound","add_unsigned_less_equal_bound","adjust_end_to_value_in_stride","adjust_start_to_value_in_stride","adjust_to_stride_and_remainder","all_bricks_are_top","append_string_domain","append_string_domain","append_string_domain","bin_op","bin_op","bin_op","bin_op","bin_op_bytesize","bitwise_not","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytesize","bytesize","bytesize","bytesize","bytesize","bytesize","bytesize","bytesize","cast","cast","cast","cast","clear_top_values","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","compare","compare","compare","compare","contains","contains_top","create_char_domain","create_char_domain","create_char_domain","create_empty_string_domain","create_empty_string_domain","create_empty_string_domain","create_float_value_domain","create_float_value_domain","create_float_value_domain","create_integer_domain","create_integer_domain","create_integer_domain","create_pointer_value_domain","create_pointer_value_domain","create_pointer_value_domain","create_top_value_domain","create_top_value_domain","create_top_value_domain","deref","deref","deref_mut","dereference","dereferenced","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","end","entry_map","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal_as_value_sets","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","fits_into_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg","from_global_address","from_global_address","from_iter","from_stack_position","from_target","from_var","from_var","get","get_absolute_value","get_address_bytesize","get_all_parent_locations","get_id_with_parent_location","get_if_absolute_value","get_if_unique_target","get_location","get_parent_location","get_parent_location","get_path_hints","get_relative_values","get_tid","get_unsized","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert_at_byte_index","int_2_comp","intersect","intersect","intersect","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_less_or_equal","is_less_or_equal","is_top","is_top","is_top","is_top","is_top","is_top","is_top","is_top","is_top","is_top","iter","mark_all_values_as_top","mark_interval_values_as_top","merge","merge","merge","merge","merge","merge","merge","merge","merge","merge_map","merge_map","merge_map","merge_map","merge_write_top","neg","neg","new","new","new","new","new","new_empty","new_top","new_top","new_top","new_top","new_top","normalize","partial_cmp","partial_cmp","partial_cmp","partial_cmp","piece","recursion_depth","recursion_depth","referenced_ids","remove","remove_ids","replace_abstract_id","replace_all_ids","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_absolute_value","set_contains_top_flag","set_relative_values","shift_left","sign_extend","signed_intersect","signed_merge","signed_merge","signed_merge_and_widen","signed_mul","signed_mul","start","stride","sub","sub","sub","sub","sub","subpiece","subpiece","subpiece","subpiece","subpiece","subpiece_higher","subpiece_lower","subtract_offset","to_json_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","top","top","top","top","top","top","top","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_to_bitvec","try_to_bitvec","try_to_bitvec","try_to_bitvec","try_to_interval","try_to_interval","try_to_interval","try_to_interval","try_to_offset","try_to_offset_interval","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","un_op","un_op","un_op","un_op","union","unset_contains_top_flag","unwrap_register","unwrap_value","unwrap_value","update_widening_lower_bound","update_widening_upper_bound","values","values_mut","widen","widen","with_offset_addendum","with_path_hint","without_last_path_hint","without_widening_hints","without_widening_hints","without_widening_hints","zero_extend","zero_extend","address","size","offset","offset","size","target","backward_interprocedural_fixpoint","callgraph","dead_variable_elimination","expression_propagation","fixpoint","forward_interprocedural_fixpoint","function_signature","graph","interprocedural_fixpoint_generic","pointer_inference","stack_alignment_substitution","string_abstraction","vsa_results","Context","GeneralizedContext","Value","borrow","borrow_mut","create_computation","create_computation_with_bottom_up_worklist_order","create_computation_with_top_down_worklist_order","from","get_context","get_graph","get_graph","into","merge","merge","new","specialize_conditional","split_call_stub","split_return_stub","try_from","try_into","type_id","update_call_stub","update_callsite","update_def","update_edge","update_jumpsite","CallGraph","find_call_sequences_to_target","get_program_callgraph","compute_alive_vars","remove_dead_var_assignments","Context","borrow","borrow_mut","from","get_graph","into","merge","merge_def_assignments_to_same_var","new","propagate_input_expression","propagate_input_expressions","specialize_conditional","try_from","try_into","type_id","update_call","update_call_stub","update_def","update_jump","update_return","Computation","Context","EdgeLabel","NodeLabel","NodeValue","borrow","borrow_mut","compute","compute_with_max_steps","from","from_node_priority_list","get_context","get_graph","get_graph","get_node_value","get_worklist","has_stabilized","into","merge","new","node_values","node_values_mut","set_node_value","try_from","try_into","type_id","update_edge","Context","GeneralizedContext","Value","borrow","borrow_mut","create_bottom_up_worklist","create_computation","create_computation_with_bottom_up_worklist_order","create_computation_with_top_down_worklist_order","create_top_down_worklist","from","get_context","get_graph","get_graph","into","merge","merge","new","specialize_conditional","try_from","try_into","type_id","update_call","update_call_stub","update_def","update_edge","update_jump","update_return","AccessPattern","FunctionSignature","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","compute_function_signatures","default","default","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_stack_params_total_size","global_parameters","into","into","is_accessed","is_dereferenced","is_mutably_dereferenced","is_top","merge","new","new","new_unknown_access","parameters","partial_cmp","serialize","serialize","set_dereference_flag","set_mutably_dereferenced_flag","set_read_flag","set_unknown_access_flags","stubs","to_json_compact","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_dereference_flag","with_mutably_dereferenced_flag","with_read_flag","compute_return_value_for_stubbed_function","generate_param_access_stubs","get_stubbed_variadic_symbols","return_value_stubs","copy_param","new_mem_object_id","or_null","param_plus_unknown_offset","untracked","BlkEnd","BlkStart","Block","Call","CallCombine","CallReturn","CallSource","CrCallStub","CrReturnStub","Edge","ExternCallStub","Graph","Jump","Node","ReturnCombine","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_block","get_entry_nodes_of_subs","get_program_cfg","get_program_cfg_with_logs","get_sub","hash","hash","into","into","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","call","return_","source","target","CallFlowCombinator","NodeValue","Value","borrow","borrow_mut","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","from","into","merge_option","serialize","to_owned","try_from","try_into","type_id","unwrap_value","call_stub","interprocedural_flow","CWE_MODULE","Config","Data","PointerInference","State","ValueDomain","add_directly_reachable_ids_to_id_set","add_param_object_from_callee","add_recursively_referenced_ids_to_id_set","allocation_symbols","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_def_for_null_dereferences","clear_non_callee_saved_register","clear_stack_parameter","clone","clone","clone_into","clone_into","collected_logs","compute","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_abstract_location","eval_address_at_def","eval_at_jmp","eval_parameter_arg","eval_parameter_arg_at_call","eval_parameter_location_at_call","eval_value_at_def","extract_pi_analysis_results","filter_location_to_pointer_data_map","fmt","fmt","from","from","from","from_fn_sig","generate_compact_json","generate_target_objects_for_new_locations","get_context","get_fn_tid","get_global_mem_id","get_graph","get_id_renaming_map_at_call_tid","get_id_to_unified_ids_replacement_map","get_node_value","get_register","get_state_at_jmp_tid","handle_load","handle_register_assign","handle_store","hash","insert_pointers_to_unified_objects","into","into","into","is_top","load_value","load_value_from_address","map_abstract_locations_to_pointer_data","memory","merge","merge_mem_objects_with_unique_abstract_location","minimize_before_return_instruction","new","new","object","print_compact_json","print_yaml","remove_non_callee_saved_register","remove_unreferenced_objects","replace_ids_to_non_parameter_objects","run","serialize","serialize","set_mips_link_register","set_register","specialize_by_expression_result","stack_id","store_value","to_json_compact","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_to_address","AbstractObject","GlobalMem","Heap","ObjectType","Stack","add_ids_to_pointer_targets","add_offset_to_all_indices","assume_arbitrary_writes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","get_mem_region","get_object_type","get_referenced_ids_overapproximation","get_referenced_ids_underapproximation","get_value","hash","into","into","is_top","is_unique","mark_as_not_unique","mark_as_unique","merge","merge_value","new","overwrite_mem_region","overwrite_with","partial_cmp","remove_ids","replace_ids","serialize","serialize","set_object_type","set_value","to_json_compact","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","substitute_and_on_stackpointer","Config","StringAbstraction","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute","context","deserialize","eq","equivalent","equivalent","equivalent","fmt","format_string_index","from","from","get_computation","get_context","get_graph","get_node_value","hash","into","into","new","run","serialize","state","string_symbols","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Context","add_constant_or_top_value_to_return_locations","add_new_string_abstract_domain","approximate_string_domain_from_datatype","block_first_def_set","block_start_node_map","borrow","borrow_mut","concat_domains","create_abstract_domain_entries_for_function_return_values","create_string_domain_for_sprintf_snprintf","create_string_domain_using_constants_and_sub_domains","create_string_domain_using_data_type_approximations","extern_symbol_map","fetch_constant_and_domain_for_format_specifier","fetch_constant_domain_if_available","fetch_subdomains_if_available","filter_out_all_non_string_args","format_string_index_map","from","get_constant_char_domain","get_constant_integer_domain","get_constant_string_domain","get_constant_target","get_graph","handle_free","handle_generic_symbol_calls","handle_memcpy_calls","handle_scanf_calls","handle_sprintf_and_snprintf_calls","handle_sscanf_calls","handle_strcat_and_strncat_calls","handle_string_symbol_calls","handle_unknown_symbol_calls","has_input_target","has_multiple_targets","has_return_target","into","jmp_to_blk_end_node_map","map_source_string_parameters_to_return_arguments","merge","merge_domains_from_multiple_pointer_targets","new","no_specifiers","parse_bitvec_to_char","parse_format_string_and_add_new_string_domain","pointer_inference_results","process_domains_for_memcpy_calls","process_domains_for_memcpy_calls_with_one_unique_input","process_second_input_domain","project","push_constant_subsequences_before_and_between_specifiers","push_constant_suffix_if_available","push_format_specifier_approximation","re_format_specifier","source_string_mapped_to_return_locations","specialize_conditional","string_symbol_map","symbol_calls","trim_format_specifier","try_from","try_into","type_id","update_call","update_call_stub","update_def","update_jump","update_return","State","add_global_pointer_if_input_is_string_constant","add_new_heap_to_string_entry","add_new_stack_offset_to_string_entry","add_new_variable_to_pointer_entry","add_pointer_to_stack_map","add_relative_targets_to_string_maps","add_top_domain_values_for_additional_pointer_targets","add_unassigned_return_pointer","borrow","borrow_mut","check_if_output_is_string_pointer_and_add_targets","clone","clone_into","collect_all_tracked_pointers","delete_string_map_entries_if_no_pointer_targets_are_tracked","deserialize","eq","equivalent","equivalent","equivalent","evaluate_constant","filter_string_map_entries","fmt","from","get_current_sub","get_heap_to_string_map","get_pointer_inference_state","get_stack_offset_to_pointer_map","get_stack_offset_to_string_map","get_unassigned_return_pointer","get_variable_to_pointer_map","handle_assign_and_load","handle_store","into","is_stack_pointer","is_top","merge","new","pointer_added_to_stack_maps","pointer_added_to_variable_maps","pointer_is_in_pointer_maps","pointer_targets_partially_tracked","remove_heap_to_string_entry","remove_non_callee_saved_pointer_entries_for_external_symbol","serialize","set_all_maps_empty","set_pointer_inference_state","set_variable_to_pointer_map","to_owned","try_from","try_into","type_id","ValueDomain","VsaResult","eval_address_at_def","eval_at_jmp","eval_parameter_arg_at_call","eval_parameter_location_at_call","eval_value_at_def","cwe_119","cwe_134","cwe_190","cwe_215","cwe_243","cwe_332","cwe_337","cwe_367","cwe_416","cwe_426","cwe_467","cwe_476","cwe_560","cwe_676","cwe_78","cwe_782","cwe_789","CWE_MODULE","check_cwe","CWE_MODULE","Config","GlobalReadable","GlobalWriteable","NonGlobal","StringLocation","Unknown","borrow","borrow","borrow_mut","borrow_mut","check_cwe","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","into","into","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","check_cwe","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","Context","borrow","borrow","borrow_mut","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","from","get_graph","hash","into","into","merge","serialize","specialize_conditional","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_call","update_call_stub","update_def","update_jump","update_return","CWE_MODULE","check_cwe","CWE_MODULE","Config","WarningContext","borrow","borrow","borrow_mut","borrow_mut","check_cwe","clone","clone","clone_into","clone_into","cmp","compare","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","hash","hash","into","into","new","partial_cmp","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","state","taint","to_owned","try_from","try_into","type_id","State","borrow","borrow_mut","check_generic_function_params_for_taint","check_if_address_points_to_taint","check_mem_id_for_taint","check_return_values_for_taint","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","eval","fmt","from","get_pointer_inference_state","into","is_empty","is_top","load_taint_from_memory","merge","new","remove_all_memory_taints","remove_non_callee_saved_taint","save_taint_to_memory","serialize","set_pointer_inference_state","set_register_taint","to_json_compact","to_owned","try_from","try_into","type_id","Taint","Tainted","Top","bin_op","borrow","borrow_mut","bytesize","cast","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","fmt","from","hash","into","is_tainted","is_top","merge","new_top","serialize","subpiece","to_owned","to_string","top","try_from","try_into","type_id","un_op","CWE_MODULE","UPPER_BOUND_CORRECT_CHMOD_ARG_VALUE","UPPER_BOUND_CORRECT_UMASK_ARG_VALUE","check_cwe","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","generate_cwe_warnings","get_calls","hash","into","resolve_symbols","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","check_if_string_domain_indicates_vulnerability","check_system_call_parameter","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","generate_cwe_warning","into","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","check_cwe","generate_cwe_warning","handle_sub","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","hash","into","serialize","to_owned","try_from","try_into","type_id","Arg","Assign","BinOp","BinOpType","Bitvector","BitvectorExtended","Blk","BoolAnd","BoolNegate","BoolOr","BoolXOr","Branch","BranchInd","ByteSize","CBranch","Call","CallInd","CallOther","CallingConvention","Cast","CastOpType","Char","Const","Datatype","DatatypeProperties","Def","Double","Expression","ExternSymbol","Float","Float2Float","FloatAbs","FloatAdd","FloatCeil","FloatDiv","FloatEqual","FloatFloor","FloatLess","FloatLessEqual","FloatMult","FloatNaN","FloatNegate","FloatNotEqual","FloatRound","FloatSqrt","FloatSub","Int2Comp","Int2Float","IntAdd","IntAnd","IntCarry","IntDiv","IntEqual","IntLeft","IntLess","IntLessEqual","IntMult","IntNegate","IntNotEqual","IntOr","IntRem","IntRight","IntSBorrow","IntSCarry","IntSDiv","IntSExt","IntSLess","IntSLessEqual","IntSRem","IntSRight","IntSub","IntXOr","IntZExt","Integer","Jmp","Load","Long","LongDouble","LongLong","Piece","Pointer","PopCount","Program","Project","Register","Return","RuntimeMemoryImage","Short","Stack","Store","Sub","Subpiece","Term","Tid","Trunc","UnOp","UnOpType","Unknown","Var","Variable","add","add_assign","add_global_memory_offset","address","address_base_offset","addresses","as_bit_length","bin_op","bin_op","blk_id_at_address","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytesize","bytesize","bytesize","bytesize","callee_saved_register","calling_convention","calling_convention","calling_conventions","cast","cast","char_size","check_for_zero_extension","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compare","compare","compare","cpu_architecture","datatype_properties","defs","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","div_assign","double_size","empty","entry_points","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_stack_offset","extern_symbols","find_block","find_sub_containing_jump","float_parameter_register","float_return_register","float_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_var","get_all_parameter_register","get_all_return_register","get_calling_convention","get_calling_convention","get_data_type","get_pointer_bytesize","get_ro_data_pointer_at_address","get_size_from_data_type","get_specific_calling_convention","get_standard_calling_convention","get_unique_parameter","get_unique_return_register","has_id_suffix","has_var_args","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","indirect_jmp_targets","input_vars","integer_parameter_register","integer_return_register","integer_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ir_sub_term","into_resize_signed","into_resize_signed","into_resize_unsigned","into_resize_unsigned","is_address_writeable","is_global_memory_address","is_interval_readable","is_interval_writeable","is_little_endian","is_little_endian_byte_order","is_temp","jmps","long_double_size","long_long_size","long_size","memory_segments","mul","mul_assign","name","name","name","name","new","new","new","new_from_bare_metal","no_return","normalize","not","parameters","partial_cmp","partial_cmp","partial_cmp","plus","plus_const","pointer_size","program","read","read_string_until_null_terminator","recursion_depth","register_set","rem","rem_assign","remove_nonexisting_indirect_jump_targets","return_values","runtime_memory_image","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl_assign","short_size","shr","shr_assign","signed_add_overflow_checked","signed_add_overflow_checked","signed_mult_with_overflow_flag","signed_mult_with_overflow_flag","signed_sub_overflow_checked","signed_sub_overflow_checked","size","stack_pointer_register","sub","sub_assign","subpiece","subpiece","subs","substitute_input_var","substitute_input_var","substitute_trivial_operations","sum","term","tid","tid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","un_op","un_op","with_id_suffix","address","data_type","data_type","expr","size","address","address","value","value","var","var","arg","arg","arg","description","lhs","low_byte","op","op","op","rhs","size","size","size","condition","description","return_","return_","return_","target","target","target","Arg","ArgIntent","BOOL_AND","BOOL_NEGATE","BOOL_OR","BOOL_XOR","BRANCH","BRANCHIND","Blk","CALL","CALLIND","CALLOTHER","CBRANCH","COPY","Call","CallingConvention","Def","Direct","Expression","ExpressionType","ExternSymbol","FLOAT2FLOAT","FLOAT_ABS","FLOAT_ADD","FLOAT_CEIL","FLOAT_DIV","FLOAT_EQUAL","FLOAT_FLOOR","FLOAT_LESS","FLOAT_LESSEQUAL","FLOAT_MULT","FLOAT_NAN","FLOAT_NEG","FLOAT_NOTEQUAL","FLOAT_ROUND","FLOAT_SQRT","FLOAT_SUB","INPUT","INT2FLOAT","INT_2COMP","INT_ADD","INT_AND","INT_CARRY","INT_DIV","INT_EQUAL","INT_LEFT","INT_LESS","INT_LESSEQUAL","INT_MULT","INT_NEGATE","INT_NOTEQUAL","INT_OR","INT_REM","INT_RIGHT","INT_SBORROW","INT_SCARRY","INT_SDIV","INT_SEXT","INT_SLESS","INT_SLESSEQUAL","INT_SREM","INT_SRIGHT","INT_SUB","INT_XOR","INT_ZEXT","Indirect","Jmp","JmpType","LOAD","Label","OUTPUT","PIECE","POPCOUNT","Program","Project","RETURN","RegisterProperties","STORE","SUBPIECE","Sub","TRUNC","Variable","address","addresses","arguments","base_register","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_string","calling_convention","calling_convention","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","cpu_architecture","datatype_properties","defs","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","entry_points","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extern_symbols","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","goto","has_var_args","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","image_base","input0","input1","input2","intent","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ir_blk","into_ir_def","into_ir_program","into_ir_project","is_virtual","jmps","lhs","location","lsb","mnemonic","mnemonic","name","name","name","name","new_const","new_virtual","no_return","normalize","parse_address_to_bitvector","parse_const_to_bitvector","parse_to_bytesize","program","register","register_calling_convention","register_properties","return_","rhs","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","size","stack_pointer_register","subs","target","target_hints","tid","to_load_def","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","var","AnalysisResults","binary","borrow","borrow_mut","clone","clone_into","compute_function_signatures","compute_pointer_inference","compute_string_abstraction","control_flow_graph","disassemble_binary","from","function_signatures","into","new","pointer_inference","project","string_abstraction","to_owned","try_from","try_into","type_id","with_function_signatures","with_pointer_inference","with_string_abstraction","arguments","binary","get_binary_base_address","get_ghidra_plugin_path","ghidra","graph_utils","log","read_config_file","symbol_utils","calculate_parameter_locations","get_input_format_string","get_variable_parameters","parse_format_string_destination_and_return_content","parse_format_string_parameters","BareMetalConfig","MemorySegment","base_address","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","execute_flag","flash_base_address","fmt","fmt","from","from","from_bare_metal_file","from_elf_segment","from_pe_section","hash","hash","into","into","new_bare_metal_ram_segment","parse_binary_base_address","parse_hex_string_to_u64","processor_id","ram_base_address","ram_size","read_flag","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_flag","get_project_from_ghidra","is_sink_call_reachable_from_source_call","Cwe","CweWarning","Debug","Error","Info","Log","LogLevel","LogMessage","LogThread","LogThreadMsg","Terminate","add_debug_log_statistics","addresses","addresses","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","collect","collect_and_deduplicate","compare","compare","compare","compare","create_disconnected_sender","default","description","deserialize","deserialize","deserialize","deserialize","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_msg_sender","hash","hash","hash","hash","into","into","into","into","into","level","location","location","name","new","new_debug","new_error","new_info","other","other","partial_cmp","partial_cmp","partial_cmp","partial_cmp","print_all_messages","serialize","serialize","serialize","serialize","source","source","spawn","symbols","symbols","text","tids","tids","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","find_symbol","get_calls_to_symbols","get_callsites","get_symbol_map"],"q":[[0,"cwe_checker_lib"],[22,"cwe_checker_lib::abstract_domain"],[632,"cwe_checker_lib::abstract_domain::AbstractLocation"],[634,"cwe_checker_lib::abstract_domain::AbstractMemoryLocation"],[638,"cwe_checker_lib::analysis"],[651,"cwe_checker_lib::analysis::backward_interprocedural_fixpoint"],[678,"cwe_checker_lib::analysis::callgraph"],[681,"cwe_checker_lib::analysis::dead_variable_elimination"],[683,"cwe_checker_lib::analysis::expression_propagation"],[703,"cwe_checker_lib::analysis::fixpoint"],[730,"cwe_checker_lib::analysis::forward_interprocedural_fixpoint"],[758,"cwe_checker_lib::analysis::function_signature"],[822,"cwe_checker_lib::analysis::function_signature::stubs"],[826,"cwe_checker_lib::analysis::function_signature::stubs::return_value_stubs"],[831,"cwe_checker_lib::analysis::graph"],[887,"cwe_checker_lib::analysis::graph::Node"],[891,"cwe_checker_lib::analysis::interprocedural_fixpoint_generic"],[912,"cwe_checker_lib::analysis::interprocedural_fixpoint_generic::NodeValue"],[914,"cwe_checker_lib::analysis::pointer_inference"],[1021,"cwe_checker_lib::analysis::pointer_inference::object"],[1086,"cwe_checker_lib::analysis::stack_alignment_substitution"],[1087,"cwe_checker_lib::analysis::string_abstraction"],[1125,"cwe_checker_lib::analysis::string_abstraction::context"],[1193,"cwe_checker_lib::analysis::string_abstraction::state"],[1246,"cwe_checker_lib::analysis::vsa_results"],[1253,"cwe_checker_lib::checkers"],[1270,"cwe_checker_lib::checkers::cwe_119"],[1272,"cwe_checker_lib::checkers::cwe_134"],[1314,"cwe_checker_lib::checkers::cwe_190"],[1335,"cwe_checker_lib::checkers::cwe_215"],[1337,"cwe_checker_lib::checkers::cwe_243"],[1358,"cwe_checker_lib::checkers::cwe_332"],[1379,"cwe_checker_lib::checkers::cwe_337"],[1416,"cwe_checker_lib::checkers::cwe_367"],[1418,"cwe_checker_lib::checkers::cwe_416"],[1460,"cwe_checker_lib::checkers::cwe_426"],[1481,"cwe_checker_lib::checkers::cwe_467"],[1502,"cwe_checker_lib::checkers::cwe_476"],[1525,"cwe_checker_lib::checkers::cwe_476::state"],[1560,"cwe_checker_lib::checkers::cwe_476::taint"],[1593,"cwe_checker_lib::checkers::cwe_560"],[1597,"cwe_checker_lib::checkers::cwe_676"],[1621,"cwe_checker_lib::checkers::cwe_78"],[1644,"cwe_checker_lib::checkers::cwe_782"],[1648,"cwe_checker_lib::checkers::cwe_789"],[1669,"cwe_checker_lib::intermediate_representation"],[2301,"cwe_checker_lib::intermediate_representation::Arg"],[2306,"cwe_checker_lib::intermediate_representation::Def"],[2312,"cwe_checker_lib::intermediate_representation::Expression"],[2325,"cwe_checker_lib::intermediate_representation::Jmp"],[2333,"cwe_checker_lib::pcode"],[2781,"cwe_checker_lib::pipeline"],[2806,"cwe_checker_lib::utils"],[2815,"cwe_checker_lib::utils::arguments"],[2820,"cwe_checker_lib::utils::binary"],[2873,"cwe_checker_lib::utils::ghidra"],[2874,"cwe_checker_lib::utils::graph_utils"],[2875,"cwe_checker_lib::utils::log"],[3013,"cwe_checker_lib::utils::symbol_utils"],[3017,"core::fmt"],[3018,"core::fmt"],[3019,"alloc::string"],[3020,"core::result"],[3021,"core::any"],[3022,"core::fmt"],[3023,"core::clone"],[3024,"core::cmp"],[3025,"core::cmp"],[3026,"serde::de"],[3027,"serde::de"],[3028,"core::iter::traits::collect"],[3029,"core::option"],[3030,"core::hash"],[3031,"core::hash"],[3032,"alloc::collections::btree::set"],[3033,"serde::ser"],[3034,"serde::ser"],[3035,"core::fmt"],[3036,"std::collections::hash::map"],[3037,"petgraph::graph_impl"],[3038,"core::ops::function"],[3039,"crossbeam_channel::channel"],[3040,"regex::regex::string"],[3041,"regex::regex::string"],[3042,"apint::bitwidth"],[3043,"alloc::string"],[3044,"std::path"],[3045,"goblin::pe::section_table"],[3046,"crossbeam_channel::channel"]],"d":["A structure containing general information about a CWE …","The generic function signature for the main function of a …","This module defines traits describing general properties …","Modules necessary for graph-based and fixpoint-based …","","","The implemented CWE checks. See their module descriptions …","Print the module name and its version number.","Returns the argument unchanged.","Get a list of all known analysis modules.","This module defines the intermediate representation used …","Calls <code>U::from(self)</code>.","The name of the CWE check.","Types to describe Ghidra P-Code and functions to translate …","This module contains functions and structs helpful for …","The function that executes the check and returns CWE …","","","","","This module contains various utility modules and helper …","The version number of the CWE check. Should be incremented …","The main trait describing an abstract domain.","An abstract identifier is used to identify an object or a …","The data contained in an abstract identifier","An abstract location describes how to find the value of a …","An abstract memory location is either an offset from the …","The <code>BitvectorDomain</code> is a simple abstract domain describing …","The single brick domain that represents a set of character …","The BricksDomain contains a sorted list of single …","The <code>CharacterInclusionDomain</code> is a abstract domain …","A domain that represents character sets.","An abstract domain representing a set of base values plus …","A set of functions that all abstract string domains should …","A <code>DomainMap&lt;Key, Value, MapMergeStrategy&gt;</code> is a wrapper …","The value itself is a constant address to global memory. …","The location is in memory. One needs to follow the pointer …","An abstract domain implementing this trait has a global …","A <code>MapMergeStrategy</code> where the merge function only keeps keys","A strided interval of values with a fixed byte size.","An abstract domain representing values in an interval …","A location inside the current memory object.","A <code>MapMergeStrategy</code> determines how the merge-method for a …","A memory region is an abstract domain representing a …","A <code>MapMergeStrategy</code> where for every key that only occurs in …","The location is in memory. One needs to follow the pointer …","A pointer which needs to be followed to get to the actual …","The location is given by a register.","A trait for abstract domains that can represent values …","A trait for types representing values with a fixed size …","A trait for domains whose values can be restricted by …","The <code>Top</code> value of the domain, representing the case that …","The <em>Top</em> value represents an invalid sequence.","The <em>Top</em> value represents the powerset over the alphabet of …","The <em>Top</em> value stands for an empty set of certainly …","The <em>Top</em> value represents a character set of all allowed …","A conversion trait for abstract domains that can represent …","A conversion trait for abstract domains that can represent …","A <code>MapMergeStrategy</code> where key-value pairs whose key is only …","The exact value of the bitvector is known.","This values represents a sequence of string subsequences.","The set of character sequences as well as the minimum and …","The set of certainly contained characters and a set of …","Represents a real subset of all allowed characters.","","","Add a value to the memory region.","Compute the interval of possible results if one adds a …","","Compute the interval of possible results if one adds a …","Return the restriction of <code>self</code> to values satisfying …","","","Add an offset to a memory location.","Add <code>offset</code> to all contained absolute and relative values …","Add an offset to the root location of the memory location.","Add the given offset to the indices of all values …","Return the restriction of <code>self</code> to values satisfying …","","","Return the restriction of <code>self</code> to values satisfying …","","","Return the restriction of <code>self</code> to values satisfying …","","","Return the restriction of <code>self</code> to values satisfying …","","","Round down <code>self.end</code> to the nearest value such that …","Round up <code>self.start</code> to the nearest value such that …","Change the given interval such that it only contains …","Checks whether all bricks of the BricksDomain are <em>Top</em> …","Inserts a string domain at a certain position if order is …","Appends new bricks to the current BricksDomain. Used to …","Append string domain as part of a concatenation. …","Compute the (abstract) result of a binary operation","Evaluate the given binary operation.","Compute the (abstract) result of a binary operation","Compute the result of a binary operation between two …","Return the bytesize of the result of the given binary …","Compute the bitwise negation of values in the interval. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the size of the represented value in bytes.","Return the bytesize of <code>self</code>.","Get the bytesize of the value represented by the abstract …","Get the bytesize of the value represented by the abstract …","Get the bytesize of the value represented by the abstract …","Return the bytesize of <code>self</code>.","Get the size in bytes of values contained in the interval.","Return the size in bytes of the represented values.","Perform a typecast to extend a bitvector or to cast …","Perform a size-changing cast on a bitvector.","Cast a bitvector using the given cast type","Compute the result of a cast operation on the interval …","Remove all values representing the <em>Top</em> element from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if <code>bitvec</code> is contained in the strided interval.","Returns <code>true</code> if the domain contains <code>Top</code> values, i.e. …","Creates a string domain with characters that usually …","Create a string domain that approximates char values.","Create a string domain that approximates char values.","Creates an empty string domain.","Create a string domain that represents an empty string.","Create a string domain that represents an empty string.","Creates a string domain with characters that usually …","Create a string domain that approximates float values.","Create a string domain that approximates float values.","Creates a string domain with characters that usually …","Create a string domain that approximates integer values.","Create a string domain that approximates integer values.","Creates a string domain with characters that usually …","Create a string domain that approximates pointer values.","Create a string domain that approximates pointer values.","Creates a top value of the currently used domain.","Creates a top value of the domain.","Creates a top value of the domain.","","","","Dereference the pointer that <code>self</code> is pointing to.","Return the abstract location that one gets when …","","","","","","","","","","","","","","","","","","The end of the interval. The bound is included in the …","Get the map of all elements including their offset into …","","","","","","","","","","","","","","","","","","Returns true if the two intervals represent the same value …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extend the location string by adding further derefence …","Extend the location string by adding further derefence …","Check whether all values in the interval are representable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create an interval that only contains the given bitvector.","Returns the argument unchanged.","Returns the argument unchanged.","Generate an interval domain without widening hints.","Create an interval containing only <code>bitvec</code>.","Returns the argument unchanged.","Returns a new instance of the Bricks Domain","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Generate a new <code>DomainMap</code> from the <code>BTreeMap</code> that it should …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an abstract identifier from a parameter argument.","Create an abstract location representing an address …","Create an abstract identifier from an address into global …","Generate a new <code>DomainMap</code> from an iterator over the …","Create an abstract location on the stack. The returned …","Return a new value representing a variable plus an offset, …","Create an abstract location from a variable corresponding …","Create a new abstract identifier where the abstract …","Get the value at the given position. If there is no value …","Return the absolute value contained in the domain if …","Get the bytesize of pointers for the address space that …","Get a list of all (recursive) parent locations. The list …","If the abstract location of <code>self</code> has a parent location …","Return the contained absolute value only if <code>self</code> contains …","Return the target ID and offset of the contained relative …","Get the location component of the abstract ID.","Get the abstract location representing the pointer …","Get the abstract memory location representing the pointer …","Get the path hints array of <code>self</code>.","Return the relative values contained in the domain.","Get the TID representing the time component of the …","Get the value at the given position regardless of the …","","","","","","","","","","Insert a value into the memory region at the given …","Take the 2’s complement of values in the interval.","Return the intersection of two values or an error if the …","Compute the intersetion of two DataDomains.","Compute the intersection of two intervals. Return an error …","Takes the intersection of two character sets. None of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the domain does not represent any value.","Checks whether the current BricksDomain is less or equal …","Checks whether the current BrickDomain is less or equal …","Returns whether the element represents the top element …","Check if the value is <em>Top</em>.","Return whether the element represents a top element or not.","The <em>Top</em> element is represented by an empty memory region.","Returns true if all values representable by bitvectors of …","Return <code>true</code> if the interval spans all possible values.","Check if the value is <em>Top</em>.","Check if the value is <em>Top</em>.","Check if the value is <em>Top</em>.","A <code>DomainMap</code> is considered to be a <code>Top</code> element if it is …","Get an iterator over all elements together with their …","Emulate a write operation to an unknown offset by merging …","Emulate a write operation of a value to an unknown offset …","Return an upper bound (with respect to the partial order …","merge two values. Returns <em>Top</em> if the values are not equal.","","Short-circuting the <code>MemRegionData::merge</code> function if …","Merge two interval domains and perform widening if …","Takes care of merging lists of bricks","Takes care of merging single bricks by taking the union of …","Merge two values; Takes the intersection of the certainly …","Merge two <code>DomainMaps</code> according to the <code>MapMergeStrategy</code> of …","This function determines how two <code>DomainMap</code> instances are …","","","","If the <code>MemRegion</code> contains an element at the given position …","","","Create a new abstract identifier.","Create a new, empty memory region.","Construct a new interval.","Create a new interval domain with the given bounds.","Returns a new instance of the Brick Domain","Return a new empty value with the given bytesize.","Return a new top element with the given bytesize. The …","Get a <em>Top</em> element with the given bitsize.","Return a new <em>Top</em> element with the given bytesize.","Construct a new unconstrained interval.","Return a new <code>Top</code> value with the given bytesize.","A set of strings can be built from multiple configurations …","","","","","Piece two intervals together, where <code>self</code> contains the most …","Get the recursion depth of the abstract location, i.e. how …","Get the recursion depth of the abstract memory location, …","Return an iterator over all referenced abstract IDs.","Remove all elements intersecting the provided interval.","Remove all provided IDs from the list of relative values.","For pointer values replace an abstract identifier with …","Replace all abstract IDs in self with the corresponding …","","","","","","","","","","","","","","","","","","Replace the absolute value contained in the domain with …","Indicate that the domain may contain <code>Top</code> values in …","Replace the map of relative values with the given one.","Compute the resulting interval after a left shift …","Sign-extend the values in the interval to the given width.","Compute the intersection of two intervals as intervals of …","Merge two intervals interpreting both as intervals of …","Merge as signed intervals without performing widenings.","Merge as signed intervals and perform widening if …","Compute the interval of possible results if one multiplies …","Compute the interval of possible results if one multiplies …","The start of the interval. The bound is included in the …","The stride.","","","Compute the interval of possible results if one subtracts …","","Compute the interval of possible results if one subtracts …","Extract a sub-bitvector","Extract a sub-bitvector out of a bitvector","extract a sub-bitvector","Take a subpiece of the bitvectors.","Take a sub-bitvector of the values in the interval domain.","Truncate the bitvectors in the interval by removing the …","Truncate the bitvectors in the interval to <code>size</code>, i.e. the …","Subtract <code>offset</code> from all contained absolute and relative …","Get a more compact json-representation of the data domain. …","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an instance of the <em>Top</em> element.","Return a <em>Top</em> value with the same bytesize as <code>self</code>.","Generate a new <em>Top</em> element with the same bytesize as <code>self</code>.","Return a new, empty memory region with the same address …","Return a new interval with the same byte size as <code>self</code> and …","Return a <em>Top</em> value","Return a <em>Top</em> value","Return a <em>Top</em> value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If <code>self</code> represents a single absolute value, return it. In …","If the domain represents an absoulute value, return it.","If the domain represents a single, absolute value, return …","If the domain represents an interval of length one, return …","If <code>self</code> represents an interval of absolute values (or can …","If the domain represents an absolute value, return it as …","If the domain represents (or can be widened to) an …","If the domain represents a bounded (i.e. not <code>Top</code>) …","If <code>self</code> represents a single absolute value, try to convert …","If <code>self</code> represents an interval of absolute values (or can …","","","","","","","","","","","","","","","","","","Compute the (abstract) result of a unary operation","Evaluate the given unary operation.","Compute the (abstract) result of a unary operation","Compute the result of an unary operation on the interval …","Takes the union of two character sets. If either of them …","Indicate that the domain does not contain any <code>Top</code> values …","Get the register associated to the abstract location. …","Unwraps the values from the Character Inclusion Domain","Unwraps the values from the CharacterSet","If <code>bound</code> is more exact/restrictive than the current lower …","If <code>bound</code> is more exact/restrictive than the current upper …","Get an iterator over all values in the memory region","Get an iterator over all values in the memory region for …","The widen function of the BricksDomain widens the values …","The widen function of the BrickDomain takes the union of …","Add an offset to the abstract location.","Create a new abstract identifier by pushing the given path …","Create a new abstract identifier by removing the last path …","Remove all widening hints from <code>self</code>. Necessary for cases …","","","Compute the interval represented if the byte size of the …","Zero-extend the values in the interval to the given width.","The address in global memory.","The byte size of the address (not the pointed-to value!).","The offset with respect to the zero offset of the memory …","The offset inside the current memory object where the …","The size in bytes of the value that the memory location …","The memory location inside the target of the pointer that …","Creating and computing backward interprocedural fixpoint …","Generate call graphs out of a program term.","This module contains a fixpoint computation to compute …","This module contains a fixpoint computation for …","Creating and computing generic fixpoint computations.","Creating and computing forward interprocedural fixpoint …","A fixpoint algorithm computing parameters of functions and …","Generate control flow graphs out of a program term.","Types and functions shared between the implementations of …","A fixpoint algorithm analyzing all memory accesses in a …","Substitutes stack pointer alignment operations utilising …","A fixpoint analysis that abstracts strings in the program …","This module provides the <code>VsaResult</code> trait which defines an …","The context for an backward interprocedural fixpoint …","This struct is a wrapper to create a general fixpoint …","The type of the values that are assigned to nodes during …","","","Generate a new computation from the corresponding context …","Generate a new computation from the corresponding context …","Generate a new computation from the corresponding context …","Returns the argument unchanged.","Get the inner context object.","Get a reference to the graph that the fixpoint is computed …","Get a reference to the underlying graph.","Calls <code>U::from(self)</code>.","Merge two node values.","Merge two values using the merge function from the …","Create a new generalized context out of an interprocedural …","This function is used to refine the value using the …","Transition function for call stub split. Has access to the …","Transition function for return stub split. Has access to …","","","","Transition function for calls to functions not contained …","Transition function for in-program calls. The target value …","Transition function for <code>Def</code> terms. The transition function …","Backward edge transition function. Applies the transition …","Transition function for (conditional and unconditional) <code>Jmp</code>…","The graph type of a call graph","Collect and return all call TIDs of call sequences that …","Generate a call graph for the given program.","Compute alive variables by means of an intraprocedural …","Remove all dead assignments from all basic blocks in the …","The context struct for the expression propagation fixpoint …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Merges two values by intersecting their …","Merge subsequent assignments to the same variable to a …","Create a new context object for the given project and …","Replaces variables by expressions that can be propagated …","Wherever possible, substitute input variables of …","","","","","","","Adds the expression for the assigned variable to the table.","","","The computation struct contains an intermediate result of …","The context of a fixpoint computation.","the type of edge labels of the underlying graph","the type of node labels of the underlying graph","The type of the value that gets assigned to each node. The …","","","Compute the fixpoint of the fixpoint problem. If the …","Compute the fixpoint of the fixpoint problem. Each node …","Returns the argument unchanged.","Create a new fixpoint computation from a fixpoint problem, …","Get a reference to the underlying context object","Get the graph on which the fixpoint computation operates.","Get a reference to the underlying graph","Get the value of a node.","Return a list of all nodes which are marked as …","Returns <code>True</code> if the computation has stabilized, i.e. the …","Calls <code>U::from(self)</code>.","This function describes how to merge two values","Create a new fixpoint computation from a fixpoint problem, …","Get a reference to the internal map where one can look up …","Get a mutable iterator over all node values. Also add all …","Set the value of a node and mark the node as not yet …","","","","This function describes how the value at the end node of …","The context for an interprocedural fixpoint computation.","This struct is a wrapper to create a general fixpoint …","The type of the values that are assigned to nodes during …","","","Returns a node ordering with callee nodes behind caller …","Generate a new computation from the corresponding context …","Generate a new computation from the corresponding context …","Generate a new computation from the corresponding context …","Returns a node ordering with caller nodes behind callee …","Returns the argument unchanged.","Get the inner context object.","Get a reference to the graph that the fixpoint is computed …","Get a reference to the underlying graph.","Calls <code>U::from(self)</code>.","Merge two node values.","Merge two values using the merge function from the …","Create a new generalized context out of an interprocedural …","This function is used to refine the value using the …","","","","Transition function for in-program calls.","Transition function for calls to functions not contained …","Transition function for <code>Def</code> terms. The transition function …","Forward edge transition function. Applies the transition …","Transition function for (conditional and unconditional) <code>Jmp</code>…","Transition function for return instructions. Has access to …","Access flags to track different kind of access/usage …","The signature of a function. Currently only contains …","","","","","","","","","","","Compute the function signatures for all functions in the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The returned number is the maximum of stack offset plus …","Values in writeable global memory accessed by the function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if any of the access flags is set.","Returns true if the dereferenced or mutably dereferenced …","Returns true if the mutably dereferenced access flag is …","Returns true if all of the access flags are set.","An access flag in the merged <code>AccessPattern</code> object is set …","Generate a new <code>AccessPattern</code> object with none of the …","Generate an empty function signature.","Generate a new <code>AccessPattern</code> object with all access flags …","The parameters of the function together with their access …","","","","Set the access flag for immutable pointer dereference.","Set the access flag for pointer dereference (with write …","Set the access flag for read access.","Set all access flags to indicate that any kind of access …","This module contains stubs for frequently used LibC-symbols","Generate a compact JSON-representation of the function …","","","","","","","","","","Set the access flag for immutable pointer dereference and …","Set the access flag for pointer dereference with write …","Set the access flag for read access and return <code>self</code>.","Compute the return value of a call to a known extern …","Returns a map that maps the names of known extern …","Return a map that maps names of stubbed variadic symbols …","Helper functions for computing return values for extern …","A return value that is just a copy of a parameter.","A return value that contains a pointer to the start of a …","The return value may also be zero in addition to its other …","A return value that adds an unknown offset to a given …","An untracked value is just a <code>Top</code> value. It is used for any …","A node corresponding to the end of the basic block, i.e. …","A node corresponding to the start of a basic block, i.e. …","An edge between the <code>BlkStart</code> and <code>BlkEnd</code> nodes of a basic …","An edge corresponding to a function call instruction. Only …","An artificial edge to combine intra- and interprocedural …","An artificial node. See the module-level documentation for …","An artificial node. See the module-level documentation for …","An artificial edge. See the module-level documentation for …","An artificial edge. See the module-level documentation for …","The edge type of an interprocedural fixpoint graph.","An edge corresponding to a call to a function not …","The graph type of an interprocedural control flow graph","An edge corresponding to an intraprocedural jump …","The node type of an interprocedural control flow graph","An artificial edge to combine intra- and interprocedural …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get the block corresponding to the node for <code>BlkStart</code> and …","Returns a map from function TIDs to the node index of the …","Build the interprocedural control flow graph for a program …","Build the interprocedural control flow graph for a program …","Get the sub corresponding to the node for <code>BlkStart</code> and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The block containing the callsite of the call.","The block that the called functions returns to.","The block containing the callsite of the call","The block containing the target of the call, i.e. the …","The value saved at artificial combinator nodes.","NodeValue that can either be a single abstract value or a …","A single abstract value","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Helper function to merge to values wrapped in <code>Option&lt;..&gt;</code>. …","","","","","","Unwraps the contained value for non-combinator nodes. …","The value flowing through the intraprocedural edge of the …","The value flowing through the interprocedural edge of the …","The name and version number of the “Memory” CWE check.","Configurable parameters for the analysis.","The abstract domain type for representing register values.","A wrapper struct for the pointer inference computation …","Contains all information known about the state of a …","The abstract domain to use for absolute values.","Search (recursively) through all memory objects referenced …","Add the given <code>param_object</code> from the callee state to <code>self</code> …","Search (recursively) through all memory objects referenced …","Names of extern functions that are <code>malloc</code>-like, i.e. the …","","","","","","","Check whether the given <code>def</code> could result in a memory …","Clear all non-callee-saved registers from the state. This …","Mark those parameter values of an extern function call, …","","","","","The log messages and CWE warnings that have been generated …","Compute the fixpoint of the pointer inference analysis. …","","","","","","","","","","","Evaluate the value of an expression in the current state.","Evaluate the value of the given abstract location on the …","Return the value of the address at the given read or store …","Evaluate the value of the given expression at the given …","Evaluate the value of a parameter of an extern symbol for …","Evaluate the value of the given parameter at the given …","Evaluate the value of the given parameter at the given …","Return the assigned value for store or assignment …","The entry point for the memory analysis check. Does not …","Filter out those locations from the location to pointer …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new state from a function signature.","Generate a compacted json representation of the results. …","Merge the target objects that are non-parameter objects …","Get the context object of the computation.","Get the Tid of the function that this state belongs to.","Get the abstract ID of the global memory object …","Get the underlying graph of the computation.","Get the mapping from callee IDs to caller values for the …","Create an ID renaming map that maps IDs in <code>self</code> to the …","Get the value associated to a node in the computed fixpoint","Get the value of a register or Top() if no value is known.","Get the state of the fixpoint computation at the block end …","Handle a load instruction by assigning the value loaded …","Evaluate expression on the given state and write the …","Evaluate the store instruction, given by its address and …","","Explicitly insert pointers to unified objects at the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A state has no <em>Top</em> element","Evaluate the given address expression and return the data …","Load the value at the given address from the state and …","Generate a map from abstract locations pointing to …","The list of all known memory objects.","Merge two states","Try to determine unique pointer locations for …","Remove all objects and registers from the state whose …","Generate a new pointer inference computation for a project.","Create a new state that contains one memory object …","This module contains the definition of the abstract memory …","Print a compacted json representation of the results to …","Print results serialized as YAML to stdout","Remove all knowledge about the contents of …","Remove all objects that cannot longer be reached by any …","Replace all IDs pointing to non-parameter objects.","Compute the pointer inference analysis and return its …","","","Set the MIPS link register <code>t9</code> to the address of the callee …","Set the value of a register.","Try to restrict the input variables of <code>expression</code> on <code>self</code> …","The abstract identifier of the current stack frame. It …","Store <code>value</code> at the given <code>address</code>.","Get a more compact json-representation of the state. …","","","","","","","","","","","","Write a value to the address one gets when evaluating the …","An abstract object contains all knowledge tracked about a …","A memory oject indicating the global memory space.","A memory object located on the heap.","An object can be a stack, a heap, or a global memory …","A stack object, i.e. the stack frame of a function.","Add IDs to the list of pointer targets for the memory …","Add an offset to all values contained in the abstract …","Marks all memory as <code>Top</code> and adds the <code>additional_targets</code> to …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get the memory region abstract domain associated to the …","Get the type of the memory object.","Get all abstract IDs that the object may contain pointers …","Get all abstract IDs for which the object contains …","Read the value at the given offset of the given size …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The domain has no <em>Top</em> element, thus this function always …","Returns <code>false</code> if the abstract object may represent more …","Mark the abstract object as possibly representing more …","Mark the abstract object as unique, i.e. it represents …","Merge two abstract objects","Merge <code>value</code> at position <code>offset</code> with the value currently …","Create a new abstract object with given object type and …","Overwrite the memory region abstract domain associated to …","Overwrite the values in <code>self</code> with those in <code>other</code> under the …","","Remove the provided IDs from the target lists of all …","Replace all abstract IDs in <code>self</code> with the values given by …","","","Set the type of the memory object.","Write a value at the given offset to the memory region.","Get a more compact json-representation of the abstract …","","","","","","","","","Substitutes logical AND on the stackpointer register by …","Configurable parameters for the analysis.","A wrapper struct for the string abstraction computation …","","","","","","","Compute the fixpoint of the string abstraction analysis. …","This module contains the Context Object for the String …","","","","","","","The index of the format string parameter in the function …","Returns the argument unchanged.","Returns the argument unchanged.","Get the string abstraction computation.","Get the context object of the computation.","Get the underlying graph of the computation.","Get the value associated to a node in the computed fixpoint","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a new string abstraction computation for a …","Compute the string abstraction and return its results.","","The state module holds all information at CFG nodes that …","Names of extern functions that manipulate strings or could …","","","","","","","","Contains all context information needed for the string …","Adds constant or <em>Top</em> value to return location given a …","Takes the pointer target if there is only one and checks …","Calls the appropriate data type approximator.","A set containing a given <code>Def</code> as the first <code>Def</code> of the block.","A map to get the node index of the <code>BlkStart</code> node …","","","Takes a vector of string domains and concatenates them.","Creates string abstract domains for return values of …","Creates a string domain for a s(n)printf call by …","Creates a string domain from found constants and sub …","Creates a domain from a format string where all specifiers …","Maps the TIDs of functions that shall be treated as …","Tries to fetch a constant or sub domain for the format …","Takes a data domain and tries to get a constant value.","Fetches subdomains if they are available for a pointer …","Filters out all parameters that are not of type string.","Maps string symbols to their corresponding format string …","Returns the argument unchanged.","Inserts a char constant into the format string.","Inserts an integer constant into the format string.","Inserts a string constant into the format string.","Returns the content of a global memory target if there is …","Get the underlying graph on which the analysis operates.","Deletes string entries in the heap to string map if the …","Handles generic symbol calls by deleting all non callee …","Handles the detection of string parameters to memcpy calls.","Handles the detection of string parameters to scanf calls. …","Handles the detection of string parameters to sprintf and …","Handles calls to sscanf. If the source string is known, it …","Handles the resulting string domain from strcat and …","The output of a string symbol is added to the map of …","Handles calls to external symbols for which no …","Checks whether the second input parameter contains a …","Checks whether a data domain has multiple targets.","Checks whether the first input parameter contains a return …","Calls <code>U::from(self)</code>.","A map to get the node index of the <code>BlkEnd</code> node containing …","Maps source strings parameters to return arguments for …","Merge two state values.","Merges domains from multiple pointer targets. The merged …","Create a new context object for a given project.","Checks whether the string has no format specifiers.","Parses a bitvector to a char if possible.","Gets the input format string, parses the input parameters …","A pointer to the results of the pointer inference analysis.","Processes string domains in memcpy calls on a case by case …","Processes domains for memcpy calls where at least one of …","Processes the contents of the second input parameter.","A reference to the <code>Project</code> object representing the binary","Creates string domains from constant subsequences that …","Pushes a potential constant suffix to the string domain …","Creates a string domain by approximating a format …","Regex that filters format specifier from a format string.","Maps the source string to the return locations of the call …","","Maps the TIDs of functions that shall be treated as string …","This module handles the string processing at external …","Removes the ‘%’ character and any size number from a …","","","","","","","","","Contains all information known about the state of a …","If the input is a string constant, add the global pointer …","Adds a new heap id to string entry to the map.","Adds a new offset to string entry to the map.","Adds a new variable to pointer entry to the map.","If a string pointer is to be stored on the stack, add it …","Adds all relative targets of the given DataDomain to the …","Adds <em>Top</em> values to stack and heap maps for additional …","Adds a return pointer to the unassigned return pointer set.","","","Checks whether the given pointer points to a string and …","","","Returns a vector of all currently tracked pointers.","Deletes all entries in the string maps that do not have …","","","","","","Evaluates the constant used as input of a Def Term. It …","Removes all string entries for which the pointers are not …","","Returns the argument unchanged.","Gets the current subroutine since the analysis is …","Returns a reference to the heap to string map.","Get the current pointer inference state if it is contained …","Returns a reference to the variable to pointer map.","Returns a reference to the stack offset to string map.","Returns the set of function return pointer that have not …","Returns a reference to the variable to pointer map.","Handles assign and load Def Terms.","Handles store Def Terms.","Calls <code>U::from(self)</code>.","Checks whether a target refers to the Stack.","The state has no explicit Top element.","Merges two states.","Creates a new state.","Adds a pointer to the stack pointer maps if its targets …","Adds a pointer to the variable pointer maps if its targets …","Checks whether a given pointer is contained in one of the …","If only some targets of a pointer point to tracked …","Removes a string from the heap to string map for the given …","Removes all non callee saved register entries from the …","","Removes all entries from the string maps.","Set the current pointer inference state for <code>self</code>.","Sets the variable to pointer map to a new value.","","","","","The type of the returned values. Usually this should be an …","A trait providing an interface for accessing the results …","Return the value of the address where something is read or …","Evaluate the value of the given expression at the given …","Return the value of a parameter at the given jump …","Return the value of a parameter at the given jump …","Return the value stored for write instructions, the value …","This module implements a check for CWE-119: Buffer Overflow","This module implements a check for CWE-134: Use of …","This module implements a check for CWE-190: Integer …","This module implements a check for CWE-215: Information …","This module implements a check for CWE-243: Creation of …","This module implements a check for CWE-332: Insufficient …","This module implements a check for CWE-337: Predictable …","This module implements a check for CWE-367: Time-of-check …","This module implements a check for CWE-415: Double Free …","This module implements a check for CWE-426: Untrusted …","This module implements a check for CWE-467: Use of …","This module implements a check for CWE-476: NULL Pointer …","This module implements a check for CWE-560: Use of umask() …","This module implements a check for CWE-676: Use of …","This module implements a check for CWE-78: Improper …","This module implements a check for CWE-782: Exposed IOCTL …","This module implements a check for CWE-789: Memory …","The module name and version","Run the check for CWE-119: Buffer Overflows.","The module name and version","The configuration struct","Global read only memory","Global read and write memory","Non Global memory","The categorization of the string location based on kinds …","Unknown memory","","","","","This check searches for external symbols that take a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The module name and version","The configuration struct. The <code>symbols</code> are extern function …","","","Run the CWE check. For each call to one of the symbols …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","The module name and version","Run the check.","The module name and version","The configuration struct contains the list of functions …","","","Run the check.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","The module name and version","The configuration struct contains pairs of symbol names, …","","","Run the CWE check. See the module-level description for …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","The module name and version","The configuration struct","The Context struct for the …","","","","","This check checks if a return value of any of the sources …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Provide access to the control flow graph.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Just forward the value merging to the <code>AbstractDomain</code>.","","We don’t care if there was some condition on the random …","","","","","","","","For now we stop the search on any sort of call.","For now we stop the search on any sort of call. But report …","Keep track of register taint through Defs. Currently, we …","We don’t care if there was some condition on the random …","For now we stop the search on any sort of call.","The module name and version","Run the check. See the module-level documentation for more …","The module name and version","The configuration struct","A struct for collecting CWE warnings together with context …","","","","","Run the check for CWE-416: Use After Free.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a new warning context object.","","","","","","","","","","","The module name and version","Function symbols read from <em>config.json</em>. The symbols are …","","","Run the CWE check. We check whether a function calls both …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","The module name and version","Function symbols read from <em>config.json</em>. All parameters of …","","","Execute the CWE check.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","The module name and version","The configuration struct","","","Run the CWE check. We check whether the return values of …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Module for the taint tracking state. Reused by the check …","Taint tracking module. Reused by the check for CWE-337, …","","","","","The state object of the taint analysis representing all …","","","Check whether a generic function call may contain tainted …","If the given address points to the stack, return true if …","Return true if the memory object with the given ID …","Check whether the return registers may contain tainted …","","","","Two states are equal if the same values are tainted in …","","","","Evaluate whether the result of the given expression is …","","Returns the argument unchanged.","Get the current pointer inference state if it is contained …","Calls <code>U::from(self)</code>.","Check whether <code>self</code> contains any taint at all.","The state has no explicit Top element.","Return whether the value at the given address (with the …","Merge two states. Any value tainted in at least one input …","Get a new state in which only the return values of the …","Remove all knowledge about taints contained in memory …","Remove the taint from all registers not contained in the …","Mark the value at the given address with the given taint.","","Set the current pointer inference state for <code>self</code>.","Set the taint of a register.","Get a more compact json-representation of the state. …","","","","","An abstract domain representing a value that is either …","A tainted value of a particular bytesize.","An untainted value of a particular bytesize","The result of a binary operation is tainted if at least …","","","The size in bytes of the <code>Taint</code> value.","The result of a cast operation is tainted if the input was …","","","","","","","","Print the value of a <code>Taint</code> object.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Checks whether the given value is in fact tainted.","Checks whether the value is an untainted <code>Top</code>-value.","The result of merging two <code>Taint</code> values is tainted if at …","Get a new <code>Top</code>-value with the given bytesize.","","A subpiece of a tainted value is again tainted.","","","Get a new <code>Top</code>-value with the same bytesize as <code>self</code>.","","","","The result of a unary operation is tainted if the input …","The module name and version","An upper bound for the value of a chmod-style argument.","An upper bound for the value of a presumably correct umask …","Execute the CWE check.","The module name and version","struct containing dangerous symbols from config.json","","","Iterate through all function calls inside the program and …","","","","","","","","","Returns the argument unchanged.","Generate cwe warnings for potentially dangerous function …","For each subroutine and each found dangerous symbol, check …","","Calls <code>U::from(self)</code>.","Filter external symbols by dangerous symbols","","","","","","The module name and version","The configuration struct","","","This check checks the string parameter at system calls …","Checks if the Bricks Domain indicates a vulnerability at …","Checks the system call parameter given by the Bricks …","","","","","","","","","Returns the argument unchanged.","Generates the CWE Warning for the CWE 78 check","Calls <code>U::from(self)</code>.","","","","","","The module name and version","Iterate through all calls of the program and flag calls to …","generate the cwe warning for CWE 782","check whether the ioctl symbol is called by any …","The module name and version","The configuration struct. If a threshold is exceeded, the …","","","Run the CWE check. For each function, we check calls of …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","A parameter or return argument of a function.","A register assignment, assigning the result of the …","A binary operation. Note that most (but not all) …","The type/mnemonic of a binary operation. See the Ghidra …","A bitvector is a fixed-length vector of bits with the …","A trait to extend the bitvector type with useful helper …","A basic block is a sequence of <code>Def</code> instructions followed …","","","","","A direct intraprocedural jump to the targeted <code>Blk</code> term …","An indirect intraprocedural jump to the address that the …","An unsigned number of bytes.","A direct intraprocedural jump that is only taken if the …","A direct interprocedural jump representing a subroutine …","An indirect interprocedural jump to the address the <code>target</code> …","This instruction is used for all side effects that are not …","Calling convention related data","A cast operation for type cast between integer and …","The type/mnemonic of a typecast See the Ghidra P-Code …","C char data type","A constant value represented by a bitvector.","C/C++ data types.","Properties of C/C++ data types such as size.","A side-effectful operation. Can be a register assignment …","C double data type","An expression is a calculation rule on how to compute a …","An extern symbol represents a funtion that is dynamically …","C float data type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C integer data type","A <code>Jmp</code> instruction affects the control flow of a program, …","A memory load into the register given by <code>var</code>.","C long data type","C long double data type","C long long data type","","C pointer data type","","The <code>Program</code> structure represents a disassembled binary.","The <code>Project</code> struct is the main data structure representing …","The argument is passed in a register","A indirect interprocedural jump indicating a return from a …","A representation of the runtime image of a binary after …","C short data type","The argument is passed on the stack.","A memory store operation.","A <code>Sub</code> or subroutine represents a function with a given …","Extracting a sub-bitvector from the argument expression.","A term is an object inside a binary with an address and an …","A term identifier consisting of an ID string (which is …","","A unary operation","The type/mnemonic of an unary operation See the Ghidra …","An unknown value but with known size. This may be …","A variable representing a register or temporary value of …","A variable represents a register with a known size and …","","","Add a global offset to the base addresses of all memory …","The address where the term is located.","An offset that has been added to all addresses in the …","Addresses of possibly multiple locations of the same …","Convert to the equivalent size in bits (by multiplying …","Perform a binary operation on the given bitvectors. …","Perform a binary operation on the given bitvectors. …","Generate the ID of a block starting at the given address.","The basic blocks belonging to the subroutine. The first …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the size in bytes of the bitvector.","Return the size in bytes of the bitvector.","Return the size (in bytes) of the result value of the …","Return the bytesize of the argument.","A list of callee-saved register, i.e. the values of these …","The calling convention used to call if known","The calling convention used for the extern symbol if known","The known calling conventions that may be used for calls …","Perform a cast operation on the bitvector. Returns an …","Perform a cast operation on the bitvector. Returns an …","Holds the size of the char type","This function checks whether the instruction is a zero …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The CPU architecture on which the binary is assumed to be …","Contains the properties of C data types. (e.g. size)","The <code>Def</code> instructions of the basic block in order of …","","","","","","","","","","","","","","","","","","","","","","","Holds the size of the double type","Generate a runtime memory image containing no memory …","Entry points into to binary, i.e. the term identifiers of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the argument is a stack argument, return its offset …","Extern symbols linked to the binary by the linker.","Find a block term by its term identifier. WARNING: The …","Find the sub containing a specific jump instruction …","Possible float parameter registers. Given as expressions, …","A list of possible return register for float values. Given …","Holds the size of the float type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Translate a P-Code variable into a register variable of …","Create a variable representing the same register as the …","Returns the argument unchanged.","Translates a P-Code expression into an expression of the …","Translate a P-Code variable into a <code>Var</code>or <code>Const</code> expression …","Returns the argument unchanged.","Translates expression types. Panics when given a type not …","Translates expression types. Panics when given a type not …","Returns the argument unchanged.","Translates expression types. Panics when given a type not …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a P-Code jump to the internally used IR.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert to <code>ByteSize</code>, while always rounding up to the …","Returns the argument unchanged.","The purpose of this conversion is to locate parameters to …","Returns the argument unchanged.","Generate a new register argument.","Return a list of all parameter registers of the calling …","Return a list of all return registers of the calling …","Get the calling convention corresponding to the extern …","Return the calling convention associated to the given …","Returns the data type field of an Arg object.","Return the size (in bytes) for pointers of the given …","For an address to global read-only memory, return the …","Matches a given data type with its size from the …","Try to find a specific calling convention in the list of …","Try to guess a standard calling convention from the list …","If the extern symbol has exactly one parameter, return the …","If the extern symbol has exactly one return value that is …","Returns true if the ID string ends with the provided …","If the function has a variable number of parameters, this …","","","","","","","","","","","","","","","","","","","If the basic block contains an indirect jump, this field …","Return an array of all input variables of the given …","Possible integer parameter registers.","A list of possible return register for non-float values.","Holds the size of the integer type","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a <code>Sub</code> term in the P-Code representation to a <code>Sub</code> …","Resize <code>self</code> to the target byte size by either sign …","Resize <code>self</code> to the target byte size by either sign …","Resize <code>self</code> to the target byte size by either zero …","Resize <code>self</code> to the target byte size by either zero …","Check whether the given address points to a writeable …","Checks whether the constant is a global memory address.","Check whether all addresses in the given interval point to …","Check whether all addresses in the given interval point to …","Endianness","Return whether values in the memory image should be …","Set to <code>false</code> for physical registers and to <code>true</code> for …","The <code>Jmp</code> instructions of the basic block","Holds the size of the long double type","Holds the size of the long long type","Holds the size of the long type","Sequence of memory segments.","","","The name of the variable. Equals the register name if the …","The name of the subroutine","The name of the extern symbol","The name of the calling convention","Generate a new term identifier with the given ID string …","Generate a runtime memory image for a given binary.","Create a new <code>ByteSize</code> object","Generate a runtime memory image for a bare metal binary.","If set to <code>true</code>, the function is assumed to never return to …","Run some normalization passes over the project.","","Parameters of an extern symbol. May be empty if there are …","","","","Shortcut for creating an <code>IntAdd</code>-expression","Construct an expression that adds a constant value to the …","Holds the size of the pointer type","All (known) executable code of the binary is contained in …","Read the contents of the memory image at the given address …","Read the contents of memory from a given address onwards …","Compute a recursion depth for the expression.","The set of all known physical registers for the CPU …","","","Remove indirect jump target addresses for which no …","Return values of an extern symbol. May be empty if there …","Represents the memory after loading the binary.","","","","","","","","","","","","","","","","","","","","","","","Holds the size of the short type","","","Returns the result of <code>self + rhs</code> if the computation does …","Returns the result of <code>self + rhs</code> if the computation does …","Return the result of multiplying <code>self</code> with <code>rhs</code> and a flag …","Return the result of multiplying <code>self</code> with <code>rhs</code> and a flag …","Returns the result of <code>self - rhs</code> if the computation does …","Returns the result of <code>self - rhs</code> if the computation does …","The size (in bytes) of the variable.","The stack pointer register for the given CPU architecture.","","","Extract a subpiece from the given bitvector.","Extract a subpiece from the given bitvector.","The known functions contained in the binary","Substitute every occurrence of <code>input_var</code> in <code>self</code> with the …","Substitute every occurence of <code>input_var</code> in the address and …","Substitute some trivial expressions with their result. …","","The object","The term identifier, which also contains the address of …","The term ID of the extern symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform a unary operation on the given bitvector. Returns …","Perform a unary operation on the given bitvector. Returns …","Add a suffix to the ID string and return the new <code>Tid</code>","The expression that computes the address of the argument …","An optional data type indicator.","An optional data type indicator.","The expression evaluating to the argument.","The size in bytes of the argument.","The expression computing the address from which to read …","The expression computing the address that is written to. …","The expression computing the value that is written to …","The expression computing the value that is assigned to the …","The target register of the memory load. The size of <code>var</code> …","The register that is written to.","The argument expression","The argument of the expression","The argument from which to extract the bitvector from.","A description of the operation","The left hand side expression","The lowest byte (i.e. least significant byte if …","The opcode/type of the operation","The opcode/type of the operation","The opcode/type of the cast operation","The right hand side expression","The byte size of the result value of the expresion","The byte size of the result of the unknown expression","The size of the resulting sub-bitvector","The jump is only taken if this expression evaluates to <code>true</code>…","A description of the side effect.","The term ID of the block that the called function returns …","The term ID of the block that the called function returns …","The block term identifier of the block where the …","The term ID of the target block of the jump.","The term ID of the target subroutine (<code>Sub</code>) or extern …","An expression computing the target address of the call.","An argument (parameter or return value) of an extern …","The intent (input or output) of a function argument.","","","","","","","A basic block.","","","","","","A call instruction.","A struct describing a calling convention.","An assignment instruction, assigning the result of an …","The term identifier of the target of a direct jump.","A P-Code expression.","Expression Opcodes as parsed from Ghidra","An extern symbol, i.e. a function not contained in the …","","","","","","","","","","","","","","","","","The argument is an input parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The varnode holding the target address of an indirect jump.","A jump instruction.","A jump type mnemonic.","","A jump label for distinguishing between direct and …","The argument is a return value.","","","The program struct containing all information about the …","The project struct describing all known information about …","","Properties of a register with respect to its base register.","","","A subfunction.","","A variable representing a varnode in Ghidra P-Code","If the varnode represents an implicit <code>LOAD</code> from memory, …","The addresses to call the extern symbol. May be more than …","The input and output arguments of the function.","The name of the base register.","The basic blocks of the function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The call struct for interprocedural jumps.","A description of the instruction for <code>CALLOTHER</code> …","The calling convention used (as reported by Ghidra, i.e. …","The calling convention used (as reported by Ghidra, i.e. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the jump is a conditional jump, the varnode that has to …","The CPU-architecture that the binary uses.","Contains the properties of C data types. (e.g. size)","The <code>Def</code> instructions of the block in chronological order.","","","","","","","","","","","","","","","","","","The term identifiers of entry points into the binary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The extern symbols referenced by the binary.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The target label for intraprocedural jumps.","If the function has a variable number of parameters, this …","","","","","","","","","","","","","","","","","","The base address of the memory image of the binary in RAM …","The first input varnode (if it exists).","The second input varnode (if it exists).","The third input varnode (if it exists).","The intent (input or output) of the argument.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a P-Code block to the internally used IR.","Convert a P-Code instruction to the internally used IR.","Convert a program parsed from Ghidra to the internally …","Convert a project parsed from Ghidra to the internally …","A flag set to <code>true</code> for virtual/temporary registers.","The jump instructions at the end of the basic block.","The target varnode whose value gets overwritten.","The expression computing the location of the argument if …","The least significant byte of the register when viewed as …","The instruction mnemonic","The mnemonic of the jump.","The name of the register if the varnode represents a …","The name of the function.","The name of the extern symbol.","The name of the calling convention.","Generate a variable representing a constant","Generate a virtual variable with the given name and size.","If the function is assumed to never return to the caller, …","This function runs normalization passes to bring the …","Parses a variable representing an address to a …","Parses a variable representing a concrete value to a …","Translates a variable into the byte size that it …","The program struct containing all binary-specific …","The register name.","Information about known calling conventions for the given …","Information about all CPU-architecture-specific registers.","The return label if the call is expected to return.","The expression that determines the value to be written.","","","","","","","","","","","","","","","","","","The size (in bytes) of the varnode","The size (in bytes) of the register","The stack pointer register of the CPU-architecture.","The subfunctions contained in the binary.","The target label. May be <code>None</code> for <code>CALLOTHER</code> instructions.","A list of potential jump targets for indirect jumps.","The term identifier of the extern symbol.","Create a LOAD instruction out of a variable representing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value of the varnode if it represents a constant","The register containing the argument if it is passed in a …","A struct containing pointers to all known analysis results …","The content of the binary file","","","","","Compute the function signatures for internal functions.","Compute the pointer inference analysis. The result gets …","Compute the string abstraction. As the string abstraction …","The computed control flow graph of the program.","Disassemble the given binary and parse it to a <code>Project</code> …","Returns the argument unchanged.","The results of the function signature analysis if already …","Calls <code>U::from(self)</code>.","Create a new <code>AnalysisResults</code> struct with only the project …","The result of the pointer inference analysis if already …","A pointer to the project struct","The result of the string abstraction if already computed.","","","","","Create a new <code>AnalysisResults</code> struct containing the given …","Create a new <code>AnalysisResults</code> struct containing the given …","Create a new <code>AnalysisResults</code> struct containing the given …","Handles argument detection by parsing format string …","Utility structs and functions which directly parse the …","Get the base address for the image of a binary when loaded …","Get the folder path to a Ghidra plugin bundled with the …","Utility functions for executing Ghidra and extracting …","Helper functions for common tasks utilizing the control …","Structs and functions for generating log messages and CWE …","Get the contents of a configuration file.","Helper functions for common tasks utilizing extern symbols,","Calculates the register and stack positions of format …","Parses the input format string for the corresponding …","Returns an argument vector of detected variable parameters.","Parses the destiniation address of the format string. It …","Parses the format string parameters using a regex, …","Contains all information parsed out of the bare metal …","A continuous segment in the memory image.","The base address, i.e. the address of the first byte of …","","","","","The contents of the segment","","","","","","","","","","","","","","","Is the segment executable","The base address of the non-volatile memory (usually flash …","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate a segment with the given <code>base_address</code> and content …","Generate a segment from a program header of an ELF file.","Generate a segment from a section table from a PE file.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a segment with the given base address and size. …","Return the base address of the binary as an integer.","A helper function to parse a hex string to an integer.","The CPU type.","The base address of the volatile memory (RAM) used by the …","The size of the volatile memory (RAM) used by the chip. …","Is the segment readable","","","","","","","","","","","Is the segment writeable","Execute the <code>p_code_extractor</code> plugin in Ghidra and parse …","Check whether a call to the <code>sink_symbol</code> is reachable from …","A CWE warning","A CWE warning message.","Messages intended for debugging.","Errors encountered during analysis.","Non-error messages intended for the user.","A normal log message.","The severity/type of a log message.","A generic log message.","A type for managing threads for collecting log messages.","The message types a logging thread can receive. See the …","If the log collector thread receives this signal, it …","For each analysis count the number of debug log messages …","Sets the address field of the CweWarning","Addresses in the binary associated with the CWE warning. …","","","","","","","","","","","","","","","","","","","","","","","Stop the logging thread by sending it the <code>Terminate</code> signal …","This function is collects logs from the given receiver …","","","","","Just create a disconnected sender to a (non-existing) …","","A short description of the warning that is presented to …","","","","","If the logging thread still exists, send it the <code>Terminate</code> …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Get a sender that can be used to send messages to the …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The severity/type of the log message.","Associate a specific location to the log message.","The location inside the binary that the message is related …","A short name of the CWE check, e.g. <code>CWE190</code>.","Creates a new CweWarning by only setting name, version and …","Create a new <code>Debug</code>-level log message","Create a new <code>Error</code>-level log message","Create a new <code>Info</code>-level log message","Sets the other field of the CweWarning","Other useful information. Content depends on the check …","","","","","Print all provided log- and CWE-messages.","","","","","Set the name of the source analysis for the log message.","The analysis where the message originated.","Create a new <code>LogThread</code> object with a handle to a freshly …","Sets the symbols field of the CweWarning","Symbol names (usually of extern symbols) associated to the …","The log message.","Sets the Tids field of the CweWarning","Term IDs associated to the CWE warning. May be more exact …","","","","","","","","","","","","","","","","","","","","","","The version number of the check.","Find the extern symbol object for a symbol name and return …","Match direct calls’ target tids in the program’s …","Find calls to TIDs contained as keys in the given symbol …","Get a map from TIDs to the corresponding extern symbol …"],"i":[0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,0,0,0,0,22,0,0,0,32,22,32,0,0,0,8,28,25,29,37,0,0,0,8,28,25,29,37,8,9,11,18,19,19,21,9,19,22,9,22,11,21,9,19,21,9,19,21,9,19,21,9,19,18,18,18,28,120,28,29,10,8,9,19,10,18,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,15,8,32,22,33,9,18,19,10,8,9,19,11,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,32,22,33,35,32,22,33,35,18,9,120,28,29,120,28,29,120,28,29,120,28,29,120,28,29,120,28,29,33,38,38,22,32,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,18,11,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,19,8,8,8,32,32,32,22,22,22,33,33,33,35,35,35,9,9,9,11,11,11,18,18,18,19,19,19,28,28,28,25,25,25,29,29,29,37,37,37,38,38,38,42,42,42,43,43,43,44,44,44,32,22,19,8,8,32,32,22,22,33,33,35,9,11,18,19,19,28,28,25,25,29,29,37,37,38,42,43,44,8,8,32,22,33,35,9,9,9,9,11,18,18,19,19,19,28,28,25,29,29,37,38,38,42,43,44,33,32,33,38,32,9,32,33,11,9,11,32,33,9,9,33,32,22,33,9,33,11,8,32,22,33,35,9,11,18,19,11,18,21,9,19,37,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,9,28,25,14,8,9,11,18,19,28,25,29,38,11,11,11,14,8,9,11,19,28,25,29,38,41,42,43,44,11,8,19,33,11,18,19,25,9,15,8,9,18,19,28,32,22,33,35,18,32,22,9,11,9,9,9,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,9,9,9,19,19,18,18,19,19,18,19,18,18,8,9,18,19,19,10,8,9,18,19,18,18,9,9,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,8,32,22,33,19,28,25,29,37,16,8,9,11,19,28,29,37,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,67,8,9,19,68,8,9,19,67,68,8,32,22,33,35,9,11,18,19,28,25,29,37,38,42,43,44,10,8,9,19,37,9,33,29,37,19,19,11,11,28,25,32,33,33,21,9,19,18,19,177,177,178,179,178,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,73,73,0,0,0,73,73,75,73,73,75,73,73,75,75,75,73,73,73,75,75,75,73,75,0,0,0,0,0,0,88,88,88,88,88,88,0,88,0,0,88,88,88,88,88,88,88,88,88,0,0,90,90,90,74,74,74,74,74,74,74,90,74,74,74,74,74,90,74,74,74,74,74,74,74,90,0,0,95,94,94,0,0,0,0,0,94,94,95,94,94,95,94,94,95,94,94,94,95,95,95,94,95,95,0,0,96,97,96,97,96,97,96,97,96,96,0,96,97,96,97,96,97,96,96,96,97,97,97,96,96,97,96,97,97,97,96,97,96,96,96,96,96,96,97,96,97,96,96,97,96,96,96,96,0,97,96,97,96,96,97,96,97,96,97,96,96,96,0,0,0,0,0,0,0,0,0,89,89,102,102,102,89,89,102,102,0,102,0,102,0,102,89,102,89,102,89,102,89,102,89,102,89,89,89,102,102,102,89,89,102,89,102,89,0,0,0,89,89,102,89,102,89,102,89,102,89,89,102,89,102,89,102,180,180,181,181,103,0,103,103,103,103,103,103,103,103,103,103,103,103,0,103,103,103,103,103,103,182,182,0,0,0,0,0,0,105,105,105,109,110,105,109,110,105,109,105,105,105,105,109,105,109,110,110,105,109,105,109,105,105,105,109,109,109,105,105,110,110,105,110,110,110,0,105,105,109,110,105,109,105,110,105,110,105,105,110,110,105,110,105,110,105,105,105,109,105,110,105,109,105,105,105,105,105,105,105,105,110,105,0,110,110,105,105,105,0,105,109,105,105,105,105,105,105,105,109,110,105,109,110,105,109,110,105,109,105,0,117,117,0,117,106,106,106,106,117,106,117,106,117,106,117,117,117,106,117,106,117,106,106,106,117,117,117,106,117,106,117,106,106,106,106,106,117,106,117,106,106,106,106,106,106,106,106,106,117,106,106,106,117,106,106,106,106,117,106,117,106,117,106,117,0,0,0,119,118,119,118,118,118,119,0,118,118,118,118,118,118,118,119,118,119,119,119,119,118,119,118,119,0,118,0,118,118,119,118,119,118,119,118,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,121,121,121,121,121,121,121,121,121,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,183,0,183,183,183,183,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,127,0,127,126,127,126,127,0,126,127,126,127,126,127,126,127,126,126,126,127,127,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,0,0,128,128,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,129,129,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,130,130,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,0,0,132,131,132,131,0,131,131,131,131,131,131,131,131,132,131,132,131,132,131,132,131,132,131,132,131,132,131,132,131,132,132,132,132,132,0,0,0,0,0,134,135,134,135,0,134,135,134,135,135,135,134,134,135,134,134,134,135,135,135,134,135,134,135,134,135,134,135,135,135,134,134,135,134,135,134,135,134,135,0,0,136,136,0,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,0,0,137,137,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,0,138,138,0,138,138,138,138,138,138,138,138,138,138,138,138,0,0,138,138,138,138,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,0,0,0,0,0,140,140,0,140,140,140,140,140,140,140,140,140,0,0,140,140,0,140,140,140,140,140,0,0,141,141,0,0,0,141,141,141,141,141,141,141,141,141,0,141,141,141,141,141,141,0,0,0,0,0,0,142,142,0,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,0,81,77,0,0,0,0,30,69,30,30,80,80,0,80,80,80,80,0,77,0,144,77,0,0,0,144,0,0,144,34,69,30,69,30,30,69,30,30,30,69,69,30,69,69,30,69,34,30,30,30,30,30,30,30,30,30,69,30,30,30,30,30,30,30,34,30,30,30,30,30,30,34,144,0,81,144,144,144,30,144,34,0,0,53,80,0,144,53,81,0,77,0,0,34,77,0,77,77,0,31,31,108,52,85,99,31,184,12,52,78,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,184,12,77,53,113,78,99,86,184,12,143,79,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,52,31,55,52,31,86,86,83,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,31,31,143,108,85,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,55,55,77,77,77,30,30,30,34,34,34,69,69,69,52,52,52,79,79,79,81,81,81,80,80,80,83,83,83,78,78,78,53,53,53,99,99,99,113,113,113,85,85,85,86,86,86,108,108,108,31,31,31,143,143,143,144,144,144,53,85,85,85,113,113,143,55,55,77,77,30,30,34,34,69,69,52,52,79,81,81,80,80,83,83,78,53,99,113,85,86,108,31,31,31,31,31,31,143,144,55,55,55,77,77,77,30,30,34,34,69,69,52,79,81,80,80,83,78,53,99,113,85,86,108,31,31,31,143,144,144,53,113,113,99,86,53,86,108,143,86,86,99,99,52,99,55,77,30,34,69,52,79,81,80,83,78,53,99,113,108,31,143,144,83,77,113,113,143,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,79,184,12,184,12,108,108,108,108,108,108,55,83,143,143,143,108,31,31,55,78,99,113,52,108,31,108,99,86,31,99,55,52,31,77,77,143,86,108,108,77,86,31,31,79,99,86,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,31,31,143,31,31,184,12,184,12,184,12,55,86,31,31,184,12,85,77,79,77,31,79,79,99,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,77,30,34,69,52,81,80,83,31,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,55,77,30,34,69,52,79,81,80,83,78,53,99,113,85,86,108,31,143,144,184,12,52,185,186,185,186,185,187,188,188,189,187,189,190,191,192,193,194,192,194,190,191,194,191,193,192,195,196,197,198,196,195,197,198,0,0,148,148,148,148,156,156,0,156,156,156,156,148,0,0,0,157,0,0,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,161,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,157,0,0,148,0,161,148,148,0,0,156,0,148,148,0,148,0,145,162,162,146,152,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,149,155,152,162,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,149,165,165,159,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,163,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,145,145,147,147,147,148,148,148,146,146,146,155,155,155,149,149,149,156,156,156,157,157,157,158,158,158,159,159,159,160,160,160,161,161,161,152,152,152,162,162,162,163,163,163,164,164,164,165,165,165,163,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,149,162,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,163,147,147,147,160,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,159,158,163,165,145,159,158,160,146,147,149,145,152,162,164,145,145,162,165,145,145,145,165,146,165,165,155,158,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,146,165,163,155,149,162,145,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,147,148,146,155,149,156,157,158,159,160,161,152,162,163,164,165,145,160,0,111,111,111,111,111,111,111,111,111,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,154,169,154,169,169,154,169,154,169,154,169,154,169,154,154,154,169,169,169,169,154,154,169,154,169,169,169,169,154,169,154,169,169,154,0,154,154,154,169,154,169,154,169,154,169,154,169,154,169,169,0,0,114,0,172,172,172,114,0,0,0,0,114,0,112,112,173,112,98,172,114,173,112,98,172,114,112,98,172,114,112,98,172,114,112,98,172,114,173,173,112,98,172,114,173,112,112,112,98,172,114,173,112,98,172,114,112,112,112,98,98,98,172,172,172,114,114,114,112,112,98,98,172,114,173,112,98,172,114,114,114,173,112,98,172,114,173,112,98,172,114,98,98,98,112,112,98,98,98,112,112,112,98,172,114,0,112,98,172,114,98,98,173,112,112,98,112,112,112,98,172,114,112,98,173,112,98,172,114,173,112,98,172,114,173,112,98,172,114,112,0,0,0,0],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,2],3],[-1,-1,[]],[[],[[4,[1]]]],0,[-1,-2,[],[]],0,0,0,0,[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[8,8],8],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[[11,[-1]],-1,12],13,[14,15,16,17]],[[18,18],18],[[19,19],19],[[19,19],19],[[-1,12],[[6,[-1,20]]],[]],[[[9,[-1]],12],[[6,[[9,[-1]],20]]],[21,10]],[[19,12],[[6,[19,20]]]],[[22,23],13],[[[9,[-1]],-1],[[9,[-1]]],10],[[22,23],13],[[[11,[-1]],23],13,[14,15,16,17]],[[-1,12],[[6,[-1,20]]],[]],[[[9,[-1]],12],[[6,[[9,[-1]],20]]],[21,10]],[[19,12],[[6,[19,20]]]],[[-1,12],[[6,[-1,20]]],[]],[[[9,[-1]],12],[[6,[[9,[-1]],20]]],[21,10]],[[19,12],[[6,[19,20]]]],[[-1,12],[[6,[-1,20]]],[]],[[[9,[-1]],12],[[6,[[9,[-1]],20]]],[21,10]],[[19,12],[[6,[19,20]]]],[[-1,12],[[6,[-1,20]]],[]],[[[9,[-1]],12],[[6,[[9,[-1]],20]]],[21,10]],[[19,12],[[6,[19,20]]]],[18,13],[18,13],[[18,24,24],[[6,[18,20]]]],[[[26,[25]]],27],[[-1,-1],-1,[]],[[28,28],28],[[29,29],29],[[-1,30,-1],-1,[]],[[8,30,8],8],[[[9,[-1]],30,[9,[-1]]],[[9,[-1]]],10],[[19,30,19],19],[[-1,30,-1],31,[]],[18,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[8,31],[32,31],[22,31],[33,31],[[[9,[-1]]],31,10],[18,31],[19,31],[[-1,34,31],-1,[]],[[8,34,31],8],[[[9,[-1]],34,31],[[9,[-1]]],10],[[19,34,31],19],[[[11,[-1]]],13,[14,15,16,17]],[8,8],[32,32],[22,22],[33,33],[35,35],[[[9,[-1]]],[[9,[-1]]],[36,10]],[[[11,[-1]]],[[11,[-1]]],[36,14,15,16,17]],[18,18],[19,19],[28,28],[25,25],[29,29],[37,37],[[[38,[-1,-2,-3]]],[[38,[-1,-2,-3]]],[39,40,36,36],[14,36],[[41,[-1,-2]],36]],[42,42],[43,43],[44,44],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[32,32],45],[[22,22],45],[[33,33],45],[[35,35],45],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[18,12],27],[[[9,[-1]]],27,10],[[],-1,[]],[[],28],[[],29],[[],-1,[]],[[],28],[[],29],[[],-1,[]],[[],28],[[],29],[[],-1,[]],[[],28],[[],29],[[],-1,[]],[[],28],[[],29],[[],-1,[]],[[],28],[[],29],[33],[[[38,[-1,-2,-3]]],[],[39,40,36],14,[[41,[-1,-2]]]],[[[38,[-1,-2,-3]]],[[46,[-1,-2]]],[39,40,36],14,[[41,[-1,-2]]]],[[22,31,31],13],[[32,31,31],32],[-1,[[6,[8]]],47],[-1,[[6,[32]]],47],[-1,[[6,[22]]],47],[-1,[[6,[33]]],47],[-1,[[6,[35]]],47],[-1,[[6,[[9,[-2]]]]],47,[48,10]],[-1,[[6,[[11,[-2]]]]],47,[48,14,15,16,17]],[-1,[[6,[18]]],47],[-1,[[6,[19]]],47],[-1,[[6,[28]]],47],[-1,[[6,[25]]],47],[-1,[[6,[29]]],47],[-1,[[6,[37]]],47],[-1,[[6,[[38,[-2,-3,-4]]]]],47,[39,40,36,48],[14,48],[[41,[-2,-3]]]],[-1,[[6,[42]]],47],[-1,[[6,[43]]],47],[-1,[[6,[44]]],47],0,[[[11,[-1]]],[[46,[23,-1]]],[14,15,16,17]],[[8,8],27],[[32,32],27],[[22,22],27],[[33,33],27],[[35,35],27],[[[9,[-1]],[9,[-1]]],27,[49,10]],[[[11,[-1]],[11,[-1]]],27,[49,14,15,16,17]],[[18,18],27],[[19,19],27],[[28,28],27],[[25,25],27],[[29,29],27],[[37,37],27],[[[38,[-1,-2,-3]],[38,[-1,-2,-3]]],27,[39,40,36,49],[14,49],[[41,[-1,-2]],49]],[[42,42],27],[[43,43],27],[[44,44],27],[[19,19],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[32,22,31],13],[[22,22,31],13],[[19,31],27],[[8,2],3],[[8,2],3],[[32,2],3],[[32,2],3],[[22,2],3],[[22,2],3],[[33,2],3],[[33,2],3],[[35,2],3],[[[9,[-1]],2],3,[17,10]],[[[11,[-1]],2],3,[17,14,15,16,17]],[[18,2],3],[[19,2],3],[[19,2],3],[[28,2],3],[[28,2],3],[[25,2],3],[[25,2],3],[[29,2],3],[[29,2],3],[[37,2],3],[[37,2],3],[[[38,[-1,-2,-3]],2],3,[39,40,36,17],[14,17],[[41,[-1,-2]],17]],[[42,2],3],[[43,2],3],[[44,2],3],[12,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[9,[-1]]],10],[12,[[9,[-1]]],[10,[50,[12]]]],[51,-1,[]],[-1,-1,[]],[-1,-1,[]],[12,18],[-1,-1,[]],[-1,-1,[]],[18,19],[12,19],[-1,-1,[]],[5,28],[-1,-1,[]],[-1,-1,[]],[5,29],[-1,-1,[]],[[[46,[-1,-2]]],[[38,[-1,-2,-3]]],[39,40,36],14,[[41,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[52,53],33],[12,32],[[52,12],33],[-1,[[38,[-2,-3,-4]]],54,[39,40,36],14,[[41,[-2,-3]]]],[[55,23,31],32],[[33,-1],[[9,[-1]]],10],[55,[[6,[32,20]]]],[[52,55],33],[[[11,[-1]],12,31],-1,[14,15,16,17]],[[[9,[-1]]],[[56,[-1]]],10],[[[11,[-1]]],31,[14,15,16,17]],[[32,31],[[4,[32]]]],[[33,31],[[56,[33]]]],[[[9,[-1]]],[[56,[-1]]],10],[[[9,[-1]]],[[56,[[13,[33,-1]]]]],10],[33,32],[[32,31],[[6,[[13,[32,23]],20]]]],[[22,31],[[6,[[13,[22,23]],23]]]],[33,[[26,[52]]]],[[[9,[-1]]],[[46,[33,-1]]],10],[33,52],[[[11,[-1]],12],[[56,[-1]]],[14,15,16,17]],[[8,-1],13,57],[[32,-1],13,57],[[22,-1],13,57],[[33,-1],13,57],[[35,-1],13,57],[[[9,[-1]],-2],13,[58,10],57],[[[11,[-1]],-2],13,[58,14,15,16,17],57],[[18,-1],13,57],[[19,-1],13,57],[[[11,[-1]],-1,23],13,[14,15,16,17]],[18,18],[[-1,-1],[[6,[-1,20]]],[]],[[[9,[-1]],[9,[-1]]],[[6,[[9,[-1]],20]]],[21,10]],[[19,19],[[6,[19,20]]]],[[37,37],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],27,10],[[28,28],27],[[25,25],27],[-1,27,[]],[8,27],[[[9,[-1]]],27,10],[[[11,[-1]]],27,[14,15,16,17]],[18,27],[19,27],[28,27],[25,27],[29,27],[[[38,[-1,-2,-3]]],27,[39,40,36],14,[[41,[-1,-2]],36,59]],[[[11,[-1]]],[[60,[23,-1]]],[14,15,16,17]],[[[11,[-1]]],13,[14,15,16,17]],[[[11,[-1]],23,23,31],13,[14,15,16,17]],[[-1,-1],-1,[]],[[8,8],8],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[[11,[-1]],[11,[-1]]],[[11,[-1]]],[14,15,16,17]],[[19,19],19],[[28,28],28],[[25,25],25],[[29,29],29],[[[38,[-1,-2,-3]],[38,[-1,-2,-3]]],[[38,[-1,-2,-3]]],[39,40,36],14,[[41,[-1,-2]],36,59]],[[[46,[-1,-2]],[46,[-1,-2]]],[[46,[-1,-2]]],[],[]],[[[46,[-1,-2]],[46,[-1,-2]]],[[46,[-1,-2]]],[40,36],14],[[[46,[-1,-2]],[46,[-1,-2]]],[[46,[-1,-2]]],[40,36],14],[[[46,[-1,-2]],[46,[-1,-2]]],[[46,[-1,-2]]],[40,36],[14,16]],[[[11,[-1]],12,31],13,[14,15,16,17]],[8,8],[19,19],[[52,32],33],[31,[[11,[-1]]],[14,15,16,17]],[[12,12,24],18],[[12,12],19],[5,25],[31,[[9,[-1]]],10],[31,-1,[]],[31,8],[31,[[9,[-1]]],10],[31,18],[31,19],[28,28],[[32,32],[[56,[45]]]],[[22,22],[[56,[45]]]],[[33,33],[[56,[45]]]],[[35,35],[[56,[45]]]],[[18,18],18],[32,24],[22,24],[[[9,[-1]]],[[0,[61]]],10],[[[11,[-1]],12,12],13,[14,15,16,17]],[[[9,[-1]],[62,[33]]],13,10],[[[9,[-1]],33,33,-1],13,10],[[[9,[-1]],[46,[33,[9,[-1]]]]],13,10],[[8,-1],6,63],[[32,-1],6,63],[[22,-1],6,63],[[33,-1],6,63],[[35,-1],6,63],[[[9,[-1]],-2],6,[64,10],63],[[[11,[-1]],-2],6,[64,14,15,16,17],63],[[18,-1],6,63],[[19,-1],6,63],[[28,-1],6,63],[[25,-1],6,63],[[29,-1],6,63],[[37,-1],6,63],[[[38,[-1,-2,-3]],-4],6,[39,40,36,64],[14,64],[[41,[-1,-2]]],63],[[42,-1],6,63],[[43,-1],6,63],[[44,-1],6,63],[[[9,[-1]],[56,[-1]]],13,10],[[[9,[-1]]],13,10],[[[9,[-1]],[46,[33,-1]]],13,10],[[19,19],19],[[19,31],19],[[18,18],[[6,[18,20]]]],[[18,18],18],[[19,19],19],[[19,19],19],[[18,18],18],[[19,19],19],0,0,[[8,8],8],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],10],[[18,18],18],[[19,19],19],[[19,19],19],[[-1,31,31],-1,[]],[[8,31,31],8],[[[9,[-1]],31,31],[[9,[-1]]],10],[[18,31,31],18],[[19,31,31],19],[[18,31],18],[[18,31],18],[[[9,[-1]],-1],[[9,[-1]]],10],[[[9,[-1]]],65,[10,66]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,-1,[]],[8,8],[[[9,[-1]]],[[9,[-1]]],10],[[[11,[-1]]],[[11,[-1]]],[14,15,16,17]],[19,19],[28,28],[29,29],[37,37],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[12,20]]],[]],[8,[[6,[12,20]]]],[[[9,[-1]]],[[6,[12,20]]],[10,67]],[19,[[6,[12,20]]]],[-1,[[6,[18,20]]],[]],[8,[[6,[18,20]]]],[[[9,[-1]]],[[6,[18,20]]],[10,68]],[19,[[6,[18,20]]]],[-1,[[6,[23,20]]],[]],[-1,[[6,[[13,[23,23]],20]]],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[-1,69],-1,[]],[[8,69],8],[[[9,[-1]],69],[[9,[-1]]],10],[[19,69],19],[[37,37],37],[[[9,[-1]]],13,10],[33,55],[29,[[13,[37,37]]]],[37,[[62,[70]]]],[[19,[56,[12]]],13],[[19,[56,[12]]],13],[[[11,[-1]]],[[71,[23,-1]]],[14,15,16,17]],[[[11,[-1]]],[[72,[23,-1]]],[14,15,16,17]],[[28,28],28],[[25,25],25],[[32,23],32],[[33,52],[[6,[33,20]]]],[33,[[13,[33,[56,[52]]]]]],[-1,-1,[]],[[[9,[-1]]],[[9,[-1]]],[21,10]],[19,19],[[18,31],18],[[19,31],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,56],[[74,[[73,[-1]]]]],75],[[-1,56],[[74,[[73,[-1]]]]],75],[[-1,56],[[74,[[73,[-1]]]]],75],[-1,-1,[]],[[[73,[-1]]],-1,75],[-1,76,[]],[[[73,[-1]]],76,75],[-1,-2,[],[]],[-1,[],[]],[[[73,[-1]]],[],75],[-1,[[73,[-1]]],75],[[-1,77,27],56,[]],[-1,56,[]],[[-1,[79,[78]]],56,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[-1,[79,[80]]],56,[]],[[-1,56,56,[79,[78]],[79,[80]],[79,[80]]],56,[]],[[-1,[79,[81]]],56,[]],[[[73,[-1]],82],56,75],[[-1,[79,[80]],[56,[[79,[80]]]],[79,[83]]],56,[]],0,[[84,52,52],[[62,[52]]]],[[[79,[85]]],84],[86,[[87,[52,[62,[55]]]]]],[86,13],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[88,76],[-1,-2,[],[]],[88],[[[79,[83]]],13],[76,88],[86,13],[[[79,[83]],[56,[[87,[55,77]]]]],13],[[88,77,[79,[83]],27],56],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[88,[79,[80]],89,[56,[5]]],56],[[88,[79,[80]]],56],[[88,[79,[81]]],56],[[88,[79,[80]],[56,[[79,[80]]]],[79,[83]]],56],[[88,56,56,[79,[80]],[79,[80]],[56,[5]]],56],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[74,[-1]]],13,90],[[[74,[-1]],24],13,90],[-1,-1,[]],[[-1,56,[4,[91]]],[[74,[-1]]],90],[[[74,[-1]]],-1,90],[-1,92,[]],[[[74,[-1]]],92,90],[[[74,[-1]],91],56,90],[[[74,[-1]]],[[4,[91]]],90],[[[74,[-1]]],27,90],[-1,-2,[],[]],[-1,[],[]],[[-1,56],[[74,[-1]]],90],[[[74,[-1]]],[[93,[91]]],90],[[[74,[-1]]],[[0,[61]]],90],[[[74,[-1]],91],13,90],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[-1,82],56,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[76,[[4,[91]]]],[[-1,56],[[74,[[94,[-1]]]]],95],[[-1,56],[[74,[[94,[-1]]]]],95],[[-1,56],[[74,[[94,[-1]]]]],95],[76,[[4,[91]]]],[-1,-1,[]],[[[94,[-1]]],-1,95],[-1,76,[]],[[[94,[-1]]],76,95],[-1,-2,[],[]],[-1,[],[]],[[[94,[-1]]],[],95],[-1,[[94,[-1]]],95],[[-1,77,[79,[83]],27],56,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[-1,[79,[80]],89,[56,[5]]],56,[]],[[-1,[79,[80]]],56,[]],[[-1,[79,[81]]],56,[]],[[[94,[-1]],82],56,95],[[-1,[79,[80]],[56,[[79,[80]]]],[79,[83]]],56,[]],[[-1,56,56,[79,[80]],[79,[80]],[56,[5]]],56,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,96],[97,97],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[96,96],45],[[-1,-2],45,[],[]],[[86,76],[[13,[[46,[52,97]],[4,[98]]]]]],[[],96],[[],97],[-1,[[6,[96]]],47],[-1,[[6,[97]]],47],[[96,96],27],[[97,97],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[96,2],3],[[96,2],3],[[97,2],3],[-1,-1,[]],[-1,-1,[]],[[97,55],23],0,[-1,-2,[],[]],[-1,-2,[],[]],[96,27],[96,27],[96,27],[96,27],[[96,96],96],[[],96],[[],97],[[],96],0,[[96,96],[[56,[45]]]],[[96,-1],6,63],[[97,-1],6,63],[96,13],[96,13],[96,13],[96,13],0,[97,65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[96,96],[96,96],[96,96],0,[[],[[46,[100,[4,[96]]]]]],[[],[[46,[100,[13,[101,96]]]]]],0,0,[[52,53],[[9,[8]]]],[[[9,[8]]],[[9,[8]]]],0,[31,[[9,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[89,89],[102,102],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[89,89],27],[[102,102],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[89,2],3],[[89,2],3],[[102,2],3],[-1,-1,[]],[-1,-1,[]],[89,[[79,[83]]]],[76,[[87,[52,91]]]],[[[79,[85]]],76],[[[79,[85]]],[[13,[76,[4,[98]]]]]],[89,[[79,[78]]]],[[89,-1],13,57],[[102,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[[89,-1],6,63],[[102,-1],6,63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[103,[-1]]],[[103,[-1]]],[36,49,59,36]],[[-1,-2],13,[],[]],[-1,[[6,[[103,[-2]]]]],47,[48,49,59,36]],[[[103,[-1]],[103,[-1]]],27,[49,49,59,36]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[56,[-1]],[56,[-1]],-2],[[56,[-1]]],36,104],[[[103,[-1]],-2],6,[64,49,59,36],63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[[103,[-1]]],-1,[49,59,36]],0,0,0,0,0,0,0,0,[[105,[62,[33]]],[[62,[33]]]],[[105,106,107],[[6,[13,20]]]],[[105,[62,[33]]],[[62,[33]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[105,[79,[81]]],[[6,[27,20]]]],[[105,[26,[55]]],13],[[105,99,108],[[6,[13,20]]]],[105,105],[109,109],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[[110,27],13],[-1,[[6,[105]]],47],[-1,[[6,[109]]],47],[[105,105],27],[[109,109],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[105,77],107],[[105,32,108],107],[[110,52],[[56,[107]]]],[[110,52,77],[[56,[107]]]],[[105,53,108],[[6,[107,20]]]],[[110,52,53],[[56,[107]]]],[[110,52,32],[[56,[107]]]],[[110,52],[[56,[107]]]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[[105,[46,[33,107]]],13],[[105,2],3],[[109,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[97,55,52],105],[110,65],[[105,[46,[33,107]]],[[46,[33,106]]]],0,[105,52],[105,33],[110,76],[[110,52],[[56,[[46,[33,107]]]]]],[[105,[46,[33,107]]],[[46,[33,107]]]],[[110,91],[[56,[[103,[105]]]]]],[[105,55],107],[[110,52],[[56,[105]]]],[[105,55,77,108],[[6,[13,20]]]],[[105,55,77],13],[[105,77,77,108],[[6,[13,20]]]],[[109,-1],13,57],[[105,[46,[33,107]],52],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,27],[[105,77,31,108],[[6,[107,20]]]],[[105,107,31,108],[[6,[107,20]]]],[[105,52],[[46,[33,107]]]],0,[[105,105],105],[[105,52],13],[[105,97,113],13],[[111,109,[115,[114]],27],110],[[55,52,[62,[24]]],105],0,[110,13],[110,13],[[105,113],13],[105,13],[[105,[46,[33,107]]],13],[[111,109,27,27],110],[[105,-1],6,63],[[109,-1],6,63],[[105,52,31],[[6,[13,20]]]],[[105,55,107],13],[[105,77,107],[[6,[13,20]]]],0,[[105,107,107,108],[[6,[13,20]]]],[105,65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[105,77,107,108],[[6,[13,20]]]],0,0,0,0,0,[[106,[62,[33]]],13],[[106,116],13],[[106,[62,[33]]],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[117,117],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[117,117],45],[[-1,-2],45,[],[]],[-1,[[6,[106]]],47],[-1,[[6,[117]]],47],[[106,106],27],[[117,117],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[106,2],3],[[117,2],3],[-1,-1,[]],[-1,-1,[]],[106,[[11,[107]]]],[106,[[56,[117]]]],[106,[[62,[33]]]],[106,[[62,[33]]]],[[106,12,31],107],[[117,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[106,27],[106,27],[106,13],[106,13],[[106,106],106],[[106,107,116],13],[[[56,[117]],31],106],[[106,[11,[107]]],13],[[106,106,116],13],[[117,117],[[56,[45]]]],[[106,[62,[33]]],13],[[106,[46,[33,107]]],13],[[106,-1],6,63],[[117,-1],6,63],[[106,[56,[117]]],13],[[106,107,116],[[6,[13,20]]]],[106,65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[86,[[56,[[4,[98]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[118,118],[[-1,-2],13,[],[]],[[[119,[-1]]],13,[14,120,16,59,[50,[5]]]],0,[-1,[[6,[118]]],47],[[118,118],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[118,2],3],0,[-1,-1,[]],[-1,-1,[]],[[[119,[-1]]],[[74,[[94,[[121,[-1]]]]]]],[14,120,16,59,[50,[5]]]],[[[119,[-1]]],[[121,[-1]]],[14,120,16,59,[50,[5]]]],[[[119,[-1]]],76,[14,120,16,59,[50,[5]]]],[[[119,[-1]],91],[[56,[[103,[[122,[-1]]]]]]],[14,120,16,59,[50,[5]]]],[[118,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[[86,76,110,118],[[119,[-1]]],[14,120,16,59,[50,[5]]]],[[86,76,110,118],[[119,[-1]]],[14,16,59,[50,[5]],120]],[[118,-1],6,63],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,[[[122,[-1]],105,[9,[19]],[56,[5]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],105,[46,[33,19]],-1],13,[14,120,16,59,[50,[5]]]],[5,-1,[14,120,16,59,[50,[5]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],-1,[14,120,16,59,[50,[5]]]],[[[121,[-1]],105,[122,[-1]],[87,[53,[56,[5]]]]],13,[14,120,16,59,[50,[5]]]],[[[121,[-1]],105,[122,[-1]],99,5],-1,[14,120,16,59,[50,[5]]]],[[[121,[-1]],5,[26,[53]],105,[122,[-1]]],-1,[14,120,16,59,[50,[5]]]],[[[121,[-1]],5],-1,[14,120,16,59,[50,[5]]]],0,[[[121,[-1]],53,5,105,[122,[-1]]],-1,[14,120,16,59,[50,[5]]]],[[[121,[-1]],[9,[19]],53],[[56,[-1]]],[14,120,16,59,[50,[5]]]],[[[9,[19]],[122,[-1]],105,53,[56,[-1]]],[[56,[-1]]],[14,120,16,59,[50,[5]]]],[[[4,[53]],[4,[5]]],[[87,[53,[56,[5]]]]]],0,[-1,-1,[]],[[[121,[-1]],12],[[56,[-1]]],[14,120,16,59,[50,[5]]]],[12,[[56,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],12],[[56,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[9,[19]]],[[56,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]]],76,[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],99,[122,[-1]]],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],99,[122,[-1]]],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]]],13,[14,120,16,59,[50,[5]]]],[[[121,[-1]],99,105],[[6,[[9,[19]],20]]],[14,120,16,59,[50,[5]]]],[[[9,[19]]],27],[[[121,[-1]],99,105],[[6,[[9,[19]],20]]],[14,120,16,59,[50,[5]]]],[-1,-2,[],[]],0,[[[121,[-1]],105,99,100],[[6,[[87,[53,[56,[5]]]],20]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]]],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]],105,[46,[33,19]]],-1,[14,120,16,59,[50,[5]]]],[[86,110,118],[[121,[-1]]],[14,16,59,[50,[5]],120]],[5,27],[12,[[56,[70]]]],[[[121,[-1]],[122,[-1]],105,99,101,[9,[19]]],13,[14,120,16,59,[50,[5]]]],0,[[[121,[-1]],[122,[-1]],105,[9,[19]],[56,[[9,[19]]]]],13,[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],105,[9,[19]],[46,[33,19]]],13,[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],99,105],-1,[14,120,16,59,[50,[5]]]],0,[[[4,[-1]],100,123,101,101],13,[14,120,16,59,[50,[5]]]],[[[4,[-1]],100,101],13,[14,120,16,59,[50,[5]]]],[[[4,[-1]],123],13,[14,120,16,59,[50,[5]]]],[[],124],[[[121,[-1]],105,[122,[-1]],[9,[19]],99],27,[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],77,[79,[83]],27],[[56,[[122,[-1]]]]],[14,120,16,59,[50,[5]]]],0,0,[5,5],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[[121,[-1]],[122,[-1]],[79,[80]],89,[56,[5]]],[[56,[[122,[-1]]]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],[79,[80]]],[[56,[[122,[-1]]]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],[79,[81]]],[[56,[[122,[-1]]]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[122,[-1]],[79,[80]],[56,[[79,[80]]]],[79,[83]]],[[56,[[122,[-1]]]]],[14,120,16,59,[50,[5]]]],[[[121,[-1]],[56,[[122,[-1]]]],[56,[[122,[-1]]]],[79,[80]],[79,[80]],[56,[5]]],[[56,[[122,[-1]]]]],[14,120,16,59,[50,[5]]]],0,[[[122,[-1]],108,[125,[[13,[52,52]]]],55,77],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]],33,-1],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],23,-1],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],55,[9,[19]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],77,[9,[19]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],105,[9,[19]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],[4,[23]],[4,[33]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],[9,[19]]],13,[14,120,16,59,[50,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[122,[-1]],105,55,108,[125,[[13,[52,52]]]]],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[122,[-1]]],[36,14,120,16,59,[50,[5]]]],[[-1,-2],13,[],[]],[[[122,[-1]]],[[4,[[9,[19]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[-1,[[6,[[122,[-2]]]]],47,[48,14,120,16,59,[50,[5]]]],[[[122,[-1]],[122,[-1]]],27,[49,14,120,16,59,[50,[5]]]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[[122,[-1]],108,[125,[[13,[52,52]]]],12],[[56,[[9,[19]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]],105],[[13,[[87,[23,-1]],[87,[33,-1]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]],2],3,[17,14,120,16,59,[50,[5]]]],[-1,-1,[]],[[[122,[-1]]],[[56,[[79,[78]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[87,[33,-1]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[56,[105]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[87,[23,[9,[19]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[87,[23,-1]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[125,[[9,[19]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]]],[[87,[55,[9,[19]]]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]],55,77,108,[125,[[13,[52,52]]]],27],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],77,77,108,[125,[[13,[52,52]]]]],13,[14,120,16,59,[50,[5]]]],[-1,-2,[],[]],[[105,33],27],[[[122,[-1]]],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]],[122,[-1]]],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[91,110],[[122,[-1]]],[14,120,16,59,[50,[5]]]],[[[122,[-1]],105,77,[9,[19]]],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]],105,55,[9,[19]]],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]],[9,[19]]],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]],105,[9,[19]]],27,[14,120,16,59,[50,[5]]]],[[[122,[-1]],33],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],86,99],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],-2],6,[64,14,120,16,59,[50,[5]]],63],[[[122,[-1]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],[56,[105]]],13,[14,120,16,59,[50,[5]]]],[[[122,[-1]],[87,[55,[9,[19]]]]],13,[14,120,16,59,[50,[5]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,[[-1,52],56,[]],[[-1,52,77],56,[]],[[-1,52,53],56,[]],[[-1,52,32],56,[]],[[-1,52],56,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[111,65],[[13,[[4,[98]],[4,[112]]]]]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[126,126],[127,127],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[-1,[[6,[126]]],47],[-1,[[6,[127]]],47],[[126,126],27],[[127,127],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[126,2],3],[[127,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[126,-1],6,63],[[127,-1],6,63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[128,128],[[-1,-2],13,[],[]],[-1,[[6,[128]]],47],[[128,128],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[128,2],3],[-1,-1,[]],[[128,-1],13,57],[-1,-2,[],[]],[[128,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,[[111,65],[[13,[[4,[98]],[4,[112]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[129,129],[[-1,-2],13,[],[]],[-1,[[6,[129]]],47],[[129,129],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[129,2],3],[-1,-1,[]],[[129,-1],13,57],[-1,-2,[],[]],[[129,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[130,130],[[-1,-2],13,[],[]],[-1,[[6,[130]]],47],[[130,130],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[130,2],3],[-1,-1,[]],[[130,-1],13,57],[-1,-2,[],[]],[[130,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[131,131],[[-1,-2],13,[],[]],[-1,[[6,[131]]],47],[[131,131],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[131,2],3],[-1,-1,[]],[-1,-1,[]],[132,76],[[131,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[132],[[131,-1],6,63],[[132,133,77,[79,[83]],27],56],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[[132,[79,[80]],89,[56,[5]]],56],[[132,133,[79,[80]]],56],[[132,133,[79,[81]]],56],[[132,133,[79,[80]],[56,[[79,[80]]]],[79,[83]]],56],[[132,56,56,[79,[80]],[79,[80]],[56,[5]]],56],0,[[111,65],[[13,[[4,[98]],[4,[112]]]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[134,134],[135,135],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[135,135],45],[[-1,-2],45,[],[]],[-1,[[6,[134]]],47],[[134,134],27],[[135,135],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[134,2],3],[[135,2],3],[-1,-1,[]],[-1,-1,[]],[[134,-1],13,57],[[135,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[[112,[4,[[13,[33,[4,[52]]]]]],52],135],[[135,135],[[56,[45]]]],[[134,-1],6,63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[136,136],[[-1,-2],13,[],[]],[-1,[[6,[136]]],47],[[136,136],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[136,2],3],[-1,-1,[]],[[136,-1],13,57],[-1,-2,[],[]],[[136,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[137,137],[[-1,-2],13,[],[]],[-1,[[6,[137]]],47],[[137,137],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[137,2],3],[-1,-1,[]],[[137,-1],13,57],[-1,-2,[],[]],[[137,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[138,138],[[-1,-2],13,[],[]],[-1,[[6,[138]]],47],[[138,138],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[138,2],3],[-1,-1,[]],[[138,-1],13,57],[-1,-2,[],[]],[[138,-1],6,63],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[133,86,[56,[105]],[56,[5]]],27],[[133,107,105],27],[[133,33],27],[[133,86,[56,[105]],[56,[5]]],27],[133,133],[[-1,-2],13,[],[]],[-1,[[6,[133]]],47],[[133,133],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[133,77],139],[[133,2],3],[-1,-1,[]],[133,[[56,[105]]]],[-1,-2,[],[]],[133,27],[133,27],[[133,107,31],139],[[133,133],133],[[99,[56,[105]]],133],[133,13],[[133,113],13],[[133,107,139],13],[[133,-1],6,63],[[133,[56,[105]]],13],[[133,55,139],13],[133,65],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,[[139,30,139],139],[-1,-2,[],[]],[-1,-2,[],[]],[139,31],[[139,34,31],139],[139,139],[[-1,-2],13,[],[]],[-1,[[6,[139]]],47],[[139,139],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[139,2],3],[[139,2],3],[-1,-1,[]],[[139,-1],13,57],[-1,-2,[],[]],[139,27],[139,27],[[139,139],139],[31,139],[[139,-1],6,63],[[139,31,31],139],[-1,-2,[],[]],[-1,5,[]],[139,139],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[139,69],139],0,0,0,[[111,65],[[13,[[4,[98]],[4,[112]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[140,140],[[-1,-2],13,[],[]],[-1,[[6,[140]]],47],[[140,140],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[140,2],3],[-1,-1,[]],[[[4,[[13,[100,52,100]]]]],[[4,[112]]]],[[[46,[52,[79,[78]]]],[87,[52,100]]],[[4,[[13,[100,52,100]]]]]],[[140,-1],13,57],[-1,-2,[],[]],[[[46,[52,99]],[26,[5]]],[[87,[52,100]]]],[[140,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[[28,52,[79,[78]],99,[115,[112]]],13],[[[122,[28]],105,99,52,[115,[112]],[115,[98]],108],13],[141,141],[[-1,-2],13,[],[]],[-1,[[6,[141]]],47],[[141,141],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[141,2],3],[-1,-1,[]],[[100,52,100],112],[-1,-2,[],[]],[[141,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[[[26,[[13,[100,52,100]]]]],[[4,[112]]]],[[[79,[78]],[87,[52,100]]],[[4,[112]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[111,65],[[13,[[4,[98]],[4,[112]]]]]],[142,142],[[-1,-2],13,[],[]],[-1,[[6,[142]]],47],[[142,142],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[142,2],3],[-1,-1,[]],[[142,-1],13,57],[-1,-2,[],[]],[[142,-1],6,63],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[31,31],31],[[31,31],13],[[108,24],13],0,0,0,[31,101],[[-1,30,-1],[[6,[-1,20]]],[]],[[12,30,12],[[6,[12,20]]]],[100,52],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[12,31],[77,31],[53,31],0,0,0,0,[[-1,34,31],[[6,[-1,20]]],[]],[[12,34,31],[[6,[12,20]]]],0,[[[79,[81]],5,5],[[56,[52]]]],[55,55],[77,77],[30,30],[34,34],[69,69],[52,52],[[[79,[-1]]],[[79,[-1]]],36],[81,81],[80,80],[83,83],[78,78],[53,53],[99,99],[113,113],[85,85],[86,86],[108,108],[31,31],[143,143],[144,144],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[55,55],45],[[52,52],45],[[31,31],45],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],0,0,0,[-1,[[6,[55]]],47],[-1,[[6,[77]]],47],[-1,[[6,[30]]],47],[-1,[[6,[34]]],47],[-1,[[6,[69]]],47],[-1,[[6,[52]]],47],[-1,[[6,[[79,[-2]]]]],47,48],[-1,[[6,[81]]],47],[-1,[[6,[80]]],47],[-1,[[6,[83]]],47],[-1,[[6,[78]]],47],[-1,[[6,[53]]],47],[-1,[[6,[99]]],47],[-1,[[6,[113]]],47],[-1,[[6,[85]]],47],[-1,[[6,[86]]],47],[-1,[[6,[108]]],47],[-1,[[6,[31]]],47],[-1,[[6,[143]]],47],[-1,[[6,[144]]],47],[[31,-1],31,[]],[[31,-1],13,[]],0,[27,108],0,[[55,55],27],[[77,77],27],[[30,30],27],[[34,34],27],[[69,69],27],[[52,52],27],[[[79,[-1]],[79,[-1]]],27,49],[[81,81],27],[[80,80],27],[[83,83],27],[[78,78],27],[[53,53],27],[[99,99],27],[[113,113],27],[[85,85],27],[[86,86],27],[[108,108],27],[[31,31],27],[[143,143],27],[[144,144],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[53,[[6,[12,20]]]],0,[[85,52],[[56,[[79,[83]]]]]],[[85,52],[[56,[52]]]],0,0,0,[[55,2],3],[[55,2],3],[[77,2],3],[[77,2],3],[[30,2],3],[[30,2],3],[[34,2],3],[[34,2],3],[[69,2],3],[[69,2],3],[[52,2],3],[[52,2],3],[[[79,[-1]],2],3,17],[[81,2],3],[[81,2],3],[[80,2],3],[[80,2],3],[[83,2],3],[[83,2],3],[[78,2],3],[[53,2],3],[[99,2],3],[[113,2],3],[[85,2],3],[[86,2],3],[[108,2],3],[[31,2],3],[[31,2],3],[[31,2],3],[[31,2],3],[[31,2],3],[[31,2],3],[[143,2],3],[[144,2],3],[-1,-1,[]],[145,55],[146,55],[-1,-1,[]],[147,77],[145,77],[-1,-1,[]],[148,30],[148,34],[-1,-1,[]],[148,69],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[149,80],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[24,31],[-1,-1,[]],[150,31],[-1,-1,[]],[5,144],[-1,-1,[]],[[55,[56,[144]]],53],[113,[[4,[55]]]],[113,[[4,[55]]]],[[99,86],113],[[86,99],113],[53,[[56,[144]]]],[86,31],[[108,12],[[6,[[13,[[26,[151]],101]],20]]]],[[143,144],31],[[86,[56,[5]]],[[56,[113]]]],[86,[[56,[113]]]],[99,[[6,[53,20]]]],[99,[[6,[55,20]]]],[[52,100],27],0,[[55,-1],13,57],[[77,-1],13,57],[[30,-1],13,57],[[34,-1],13,57],[[69,-1],13,57],[[52,-1],13,57],[[[79,[-1]],-2],13,58,57],[[81,-1],13,57],[[80,-1],13,57],[[83,-1],13,57],[[78,-1],13,57],[[53,-1],13,57],[[99,-1],13,57],[[113,-1],13,57],[[108,-1],13,57],[[31,-1],13,57],[[143,-1],13,57],[[144,-1],13,57],0,[77,[[4,[55]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[79,[152]],31],[[79,[78]]]],[[-1,31],-1,[]],[[12,31],12],[[-1,31],-1,[]],[[12,31],12],[[108,12],[[6,[27,20]]]],[[108,12],27],[[108,24,24],[[6,[27,20]]]],[[108,24,24],[[6,[27,20]]]],0,[108,27],0,0,0,0,0,0,[[31,-1],31,[]],[[31,-1],13,[]],0,0,0,0,[-1,52,153],[[[26,[151]]],[[6,[108,20]]]],[24,31],[[[26,[151]],154],[[6,[108,20]]]],0,[86,[[4,[98]]]],[31,31],0,[[55,55],[[56,[45]]]],[[52,52],[[56,[45]]]],[[31,31],[[56,[45]]]],[[77,77],77],[[77,23],77],0,0,[[108,12,31],[[6,[[56,[12]],20]]]],[[108,12],[[6,[100,20]]]],[77,24],0,[[31,-1],31,[]],[[31,-1],13,[]],[[[79,[83]],[125,[52]]],[[6,[13,[4,[98]]]]]],0,0,[[55,-1],6,63],[[77,-1],6,63],[[30,-1],6,63],[[34,-1],6,63],[[69,-1],6,63],[[52,-1],6,63],[[[79,[-1]],-2],6,64,63],[[81,-1],6,63],[[80,-1],6,63],[[83,-1],6,63],[[78,-1],6,63],[[53,-1],6,63],[[99,-1],6,63],[[113,-1],6,63],[[85,-1],6,63],[[86,-1],6,63],[[108,-1],6,63],[[31,-1],6,63],[[143,-1],6,63],[[144,-1],6,63],[[31,-1],31,[]],[[31,-1],13,[]],0,[[31,-1],31,[]],[[31,-1],13,[]],[[-1,-1],[[56,[-1]]],[]],[[12,12],[[56,[12]]]],[[-1,-1],[[6,[[13,[-1,27]],20]]],[]],[[12,12],[[6,[[13,[12,27]],20]]]],[[-1,-1],[[56,[-1]]],[]],[[12,12],[[56,[12]]]],0,0,[[31,31],31],[[31,31],13],[[-1,31,31],-1,[]],[[12,31,31],12],0,[[77,55,77],13],[[[79,[81]],55,77],13],[77,13],[-1,31,61],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[-1,69],[[6,[-1,20]]],[]],[[12,69],[[6,[12,20]]]],[[52,100],52],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[145,145],[147,147],[148,148],[146,146],[155,155],[149,149],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[152,152],[162,162],[163,163],[164,164],[165,165],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,0,0,0,[-1,[[6,[145]]],47],[-1,[[6,[147]]],47],[-1,[[6,[148]]],47],[-1,[[6,[146]]],47],[-1,[[6,[155]]],47],[-1,[[6,[149]]],47],[-1,[[6,[156]]],47],[-1,[[6,[157]]],47],[-1,[[6,[158]]],47],[-1,[[6,[159]]],47],[-1,[[6,[160]]],47],[-1,[[6,[161]]],47],[-1,[[6,[152]]],47],[-1,[[6,[162]]],47],[-1,[[6,[163]]],47],[-1,[[6,[164]]],47],[-1,[[6,[165]]],47],0,[[145,145],27],[[147,147],27],[[148,148],27],[[146,146],27],[[155,155],27],[[149,149],27],[[156,156],27],[[157,157],27],[[158,158],27],[[159,159],27],[[160,160],27],[[161,161],27],[[152,152],27],[[162,162],27],[[163,163],27],[[164,164],27],[[165,165],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],0,[[145,2],3],[[147,2],3],[[148,2],3],[[146,2],3],[[155,2],3],[[149,2],3],[[156,2],3],[[157,2],3],[[158,2],3],[[159,2],3],[[160,2],3],[[161,2],3],[[152,2],3],[[162,2],3],[[163,2],3],[[164,2],3],[[165,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[145,-1],13,57],[[147,-1],13,57],[[148,-1],13,57],[[146,-1],13,57],[[155,-1],13,57],[[149,-1],13,57],[[156,-1],13,57],[[157,-1],13,57],[[158,-1],13,57],[[159,-1],13,57],[[160,-1],13,57],[[161,-1],13,57],[[152,-1],13,57],[[162,-1],13,57],[[163,-1],13,57],[[164,-1],13,57],[[165,-1],13,57],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[159,31],83],[[158,31],81],[[163,24,[26,[164]],145,100],85],[[165,24],86],0,0,0,0,0,0,0,0,0,0,0,[[-1,31],145,[[166,[5]]]],[[-1,31],145,[[166,[5]]]],0,[165,[[4,[98]]]],[[145,31],12],[145,12],[145,31],0,0,0,0,0,0,[[145,-1],6,63],[[147,-1],6,63],[[148,-1],6,63],[[146,-1],6,63],[[155,-1],6,63],[[149,-1],6,63],[[156,-1],6,63],[[157,-1],6,63],[[158,-1],6,63],[[159,-1],6,63],[[160,-1],6,63],[[161,-1],6,63],[[152,-1],6,63],[[162,-1],6,63],[[163,-1],6,63],[[164,-1],6,63],[[165,-1],6,63],0,0,0,0,0,0,0,[[145,-1,31],158,[[166,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[111,111],[[-1,-2],13,[],[]],[111,[[13,[[46,[52,97]],[4,[98]]]]]],[[111,65,27],110],[[111,65,[56,[110]]],[[119,[28]]]],0,[[167,[56,[154]],27],[[6,[[13,[[4,[151]],86,[4,[98]]]],20]]]],[-1,-1,[]],0,[-1,-2,[],[]],[[[26,[151]],76,86],111],0,0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[[111,[56,[[46,[52,97]]]]],111],[[111,[56,[110]]],111],[[111,[56,[[119,[28]]]]],111],0,0,[[[26,[151]]],[[6,[24,20]]]],[100,168],0,0,0,[100,[[6,[65,20]]]],0,[[[4,[[13,[144,31]]]],99,86],[[4,[53]]]],[[105,99,101,108],[[6,[5,20]]]],[[86,105,99,[87,[5,101]]],[[6,[[4,[53]],20]]]],[[12,108],[[6,[5,20]]]],[[100,143],[[6,[[4,[[13,[144,31]]]],20]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[154,154],[169,169],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[-1,[[6,[154]]],47],[-1,[[6,[169]]],47],[[154,154],27],[[169,169],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],0,0,[[154,2],3],[[169,2],3],[-1,-1,[]],[-1,-1,[]],[[[26,[151]],24],169],[[[26,[151]],170],169],[[[26,[151]],171],169],[[154,-1],13,57],[[169,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[[24,24],169],[154,24],[100,[[6,[24,20]]]],0,0,0,0,[[154,-1],6,63],[[169,-1],6,63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,[[167,[26,[151]],[56,[154]],27],[[6,[[13,[86,[4,[98]]]],20]]]],[[76,91,52,52],[[56,[52]]]],0,0,0,0,0,0,0,0,0,0,0,[[[4,[98]]],13],[[112,[4,[5]]],112],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[112,112],[98,98],[172,172],[114,114],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[112,112],45],[[98,98],45],[[172,172],45],[[114,114],45],[173,[[13,[[4,[98]],[4,[112]]]]]],[[[174,[114]]],[[13,[[4,[98]],[4,[112]]]]]],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[-1,-2],45,[],[]],[[],[[115,[114]]]],[[],112],0,[-1,[[6,[112]]],47],[-1,[[6,[98]]],47],[-1,[[6,[172]]],47],[-1,[[6,[114]]],47],[173,13],[[112,112],27],[[98,98],27],[[172,172],27],[[114,114],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[112,2],3],[[112,2],3],[[98,2],3],[[98,2],3],[[172,2],3],[[114,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[112,114],[98,114],[-1,-1,[]],[173,[[115,[114]]]],[[112,-1],13,57],[[98,-1],13,57],[[172,-1],13,57],[[114,-1],13,57],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[98,52],98],0,0,[[-1,-2,-3],112,153,153,153],[-1,98,[[166,[5]]]],[-1,98,[[166,[5]]]],[-1,98,[[166,[5]]]],[[112,[4,[[4,[5]]]]],112],0,[[112,112],[[56,[45]]]],[[98,98],[[56,[45]]]],[[172,172],[[56,[45]]]],[[114,114],[[56,[45]]]],[[[4,[98]],[4,[112]],[56,[100]],27],13],[[112,-1],6,63],[[98,-1],6,63],[[172,-1],6,63],[[114,-1],6,63],[[98,-1],98,[[166,[5]]]],0,[-1,173,[175,176]],[[112,[4,[5]]],112],0,0,[[112,[4,[5]]],112],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,[[[79,[85]],100],[[56,[[13,[52,100]]]]]],[[[79,[78]],[87,[52,100]]],[[4,[[13,[100,52,100]]]]]],[[[79,[78]],[87,[52,99]]],[[4,[[13,[[79,[83]],[79,[80]],99]]]]]],[[86,[26,[5]]],[[87,[52,99]]]]],"c":[],"p":[[3,"CweModule",0],[3,"Formatter",3017],[6,"Result",3017],[3,"Vec",3018],[3,"String",3019],[4,"Result",3020],[3,"TypeId",3021],[4,"BitvectorDomain",22],[3,"DataDomain",22],[8,"RegisterDomain",22],[3,"MemRegion",22],[6,"Bitvector",1669],[15,"tuple"],[8,"AbstractDomain",22],[8,"SizedDomain",22],[8,"HasTop",22],[8,"Debug",3017],[3,"Interval",22],[3,"IntervalDomain",22],[3,"Error",3022],[8,"SpecializeByConditional",22],[4,"AbstractMemoryLocation",22],[15,"i64"],[15,"u64"],[4,"BrickDomain",22],[15,"slice"],[15,"bool"],[4,"BricksDomain",22],[4,"CharacterInclusionDomain",22],[4,"BinOpType",1669],[3,"ByteSize",1669],[4,"AbstractLocation",22],[3,"AbstractIdentifier",22],[4,"CastOpType",1669],[3,"AbstractIdentifierData",22],[8,"Clone",3023],[4,"CharacterSet",22],[3,"DomainMap",22],[8,"PartialOrd",3024],[8,"Ord",3024],[8,"MapMergeStrategy",22],[3,"UnionMergeStrategy",22],[3,"IntersectMergeStrategy",22],[3,"MergeTopStrategy",22],[4,"Ordering",3024],[3,"BTreeMap",3025],[8,"Deserializer",3026],[8,"Deserialize",3026],[8,"PartialEq",3024],[8,"From",3027],[15,"never"],[3,"Tid",1669],[4,"Arg",1669],[8,"IntoIterator",3028],[3,"Variable",1669],[4,"Option",3029],[8,"Hasher",3030],[8,"Hash",3030],[8,"Eq",3024],[3,"Iter",3025],[8,"Iterator",3031],[3,"BTreeSet",3032],[8,"Serializer",3033],[8,"Serialize",3033],[4,"Value",3034],[8,"Display",3017],[8,"TryToBitvec",22],[8,"TryToInterval",22],[4,"UnOpType",1669],[15,"char"],[3,"Values",3025],[3,"ValuesMut",3025],[3,"GeneralizedContext",651],[3,"Computation",703],[8,"Context",651],[6,"Graph",831],[4,"Expression",1669],[3,"Sub",1669],[3,"Term",1669],[4,"Jmp",1669],[4,"Def",1669],[3,"EdgeIndex",3035],[3,"Blk",1669],[6,"CallGraph",678],[3,"Program",1669],[3,"Project",1669],[3,"HashMap",3036],[3,"Context",683],[4,"Node",831],[8,"Context",703],[3,"NodeIndex",3035],[6,"DiGraph",3035],[6,"FnvHashMap",3037],[3,"GeneralizedContext",730],[8,"Context",730],[3,"AccessPattern",758],[3,"FunctionSignature",758],[3,"LogMessage",2875],[3,"ExternSymbol",1669],[15,"str"],[15,"usize"],[4,"Edge",831],[4,"NodeValue",891],[8,"Fn",3038],[3,"State",914],[3,"AbstractObject",1021],[6,"Data",914],[3,"RuntimeMemoryImage",1669],[3,"Config",914],[3,"PointerInference",914],[3,"AnalysisResults",2781],[3,"CweWarning",2875],[3,"CallingConvention",1669],[4,"LogThreadMsg",2875],[3,"Sender",3039],[6,"ValueDomain",914],[4,"ObjectType",1021],[3,"Config",1087],[3,"StringAbstraction",1087],[8,"DomainInsertion",22],[3,"Context",1125],[3,"State",1193],[3,"Match",3040],[3,"Regex",3040],[3,"HashSet",3041],[3,"Config",1272],[4,"StringLocation",1272],[3,"Config",1314],[3,"Config",1337],[3,"Config",1358],[3,"Config",1379],[3,"Context",1379],[3,"State",1525],[3,"Config",1418],[3,"WarningContext",1418],[3,"Config",1460],[3,"Config",1481],[3,"Config",1502],[4,"Taint",1560],[3,"Config",1597],[3,"Config",1621],[3,"Config",1648],[3,"DatatypeProperties",1669],[4,"Datatype",1669],[3,"Variable",2333],[3,"RegisterProperties",2333],[3,"Expression",2333],[4,"ExpressionType",2333],[3,"Jmp",2333],[3,"BitWidth",3042],[15,"u8"],[3,"Sub",2333],[8,"ToString",3019],[3,"BareMetalConfig",2820],[3,"Call",2333],[4,"JmpType",2333],[4,"Label",2333],[3,"Def",2333],[3,"Blk",2333],[3,"Arg",2333],[4,"ArgIntent",2333],[3,"ExternSymbol",2333],[3,"Program",2333],[3,"CallingConvention",2333],[3,"Project",2333],[8,"Into",3027],[3,"Path",3043],[3,"PathBuf",3043],[3,"MemorySegment",2820],[3,"ProgramHeader",3044],[3,"SectionTable",3045],[4,"LogLevel",2875],[3,"LogThread",2875],[3,"Receiver",3039],[8,"FnOnce",3038],[8,"Send",3046],[13,"GlobalAddress",632],[13,"Location",634],[13,"Pointer",634],[13,"CallReturn",887],[13,"CallSource",887],[13,"CallFlowCombinator",912],[8,"VsaResult",1246],[8,"BitvectorExtended",1669],[13,"Stack",2301],[13,"Register",2301],[13,"Load",2306],[13,"Store",2306],[13,"Assign",2306],[13,"UnOp",2312],[13,"Cast",2312],[13,"Subpiece",2312],[13,"Unknown",2312],[13,"BinOp",2312],[13,"CBranch",2325],[13,"CallOther",2325],[13,"Call",2325],[13,"CallInd",2325]],"b":[[68,"impl-Add-for-IntervalDomain"],[69,"impl-IntervalDomain"],[307,"impl-Display-for-BitvectorDomain"],[308,"impl-Debug-for-BitvectorDomain"],[309,"impl-Debug-for-AbstractLocation"],[310,"impl-Display-for-AbstractLocation"],[311,"impl-Display-for-AbstractMemoryLocation"],[312,"impl-Debug-for-AbstractMemoryLocation"],[313,"impl-Debug-for-AbstractIdentifier"],[314,"impl-Display-for-AbstractIdentifier"],[319,"impl-Debug-for-IntervalDomain"],[320,"impl-Display-for-IntervalDomain"],[321,"impl-Debug-for-BricksDomain"],[322,"impl-Display-for-BricksDomain"],[323,"impl-Display-for-BrickDomain"],[324,"impl-Debug-for-BrickDomain"],[325,"impl-Display-for-CharacterInclusionDomain"],[326,"impl-Debug-for-CharacterInclusionDomain"],[327,"impl-Debug-for-CharacterSet"],[328,"impl-Display-for-CharacterSet"],[339,"impl-From%3CT%3E-for-DataDomain%3CT%3E"],[340,"impl-From%3CApInt%3E-for-DataDomain%3CT%3E"],[347,"impl-From%3CInterval%3E-for-IntervalDomain"],[348,"impl-From%3CApInt%3E-for-IntervalDomain"],[503,"impl-Sub-for-IntervalDomain"],[504,"impl-IntervalDomain"],[783,"impl-Debug-for-AccessPattern"],[784,"impl-Display-for-AccessPattern"],[862,"impl-Display-for-Node%3C\'a%3E"],[863,"impl-Debug-for-Node%3C\'a%3E"],[1575,"impl-Display-for-Taint"],[1576,"impl-Debug-for-Taint"],[1993,"impl-Debug-for-Variable"],[1994,"impl-Display-for-Variable"],[1995,"impl-Display-for-Expression"],[1996,"impl-Debug-for-Expression"],[1997,"impl-Debug-for-BinOpType"],[1998,"impl-Display-for-BinOpType"],[1999,"impl-Display-for-CastOpType"],[2000,"impl-Debug-for-CastOpType"],[2001,"impl-Display-for-UnOpType"],[2002,"impl-Debug-for-UnOpType"],[2003,"impl-Debug-for-Tid"],[2004,"impl-Display-for-Tid"],[2006,"impl-Debug-for-Def"],[2007,"impl-Display-for-Def"],[2008,"impl-Debug-for-Jmp"],[2009,"impl-Display-for-Jmp"],[2010,"impl-Display-for-Blk"],[2011,"impl-Debug-for-Blk"],[2019,"impl-LowerHex-for-ByteSize"],[2020,"impl-Debug-for-ByteSize"],[2021,"impl-UpperHex-for-ByteSize"],[2022,"impl-Display-for-ByteSize"],[2023,"impl-Binary-for-ByteSize"],[2024,"impl-Octal-for-ByteSize"],[2028,"impl-From%3CVariable%3E-for-Variable"],[2029,"impl-From%3C%26RegisterProperties%3E-for-Variable"],[2031,"impl-From%3CExpression%3E-for-Expression"],[2032,"impl-From%3CVariable%3E-for-Expression"],[2052,"impl-From%3Cu64%3E-for-ByteSize"],[2054,"impl-From%3CBitWidth%3E-for-ByteSize"],[2941,"impl-Debug-for-CweWarning"],[2942,"impl-Display-for-CweWarning"],[2943,"impl-Debug-for-LogMessage"],[2944,"impl-Display-for-LogMessage"],[2951,"impl-From%3CCweWarning%3E-for-LogThreadMsg"],[2952,"impl-From%3CLogMessage%3E-for-LogThreadMsg"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
