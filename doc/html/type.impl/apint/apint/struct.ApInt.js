(function() {var type_impls = {
"cwe_checker_lib":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#41\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"constructors\"><a href=\"#constructors\">Constructors</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bit\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#80-81\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_bit\" class=\"fn\">from_bit</a>&lt;B&gt;(bit: B) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a><span class=\"where fmt-newline\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://docs.rs/crate/apint/0.2.0/apint/digit/enum.Bit.html\" title=\"enum apint::digit::Bit\">Bit</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from the given <code>Bit</code> value with a bit width of <code>1</code>.</p>\n<p>This function is generic over types that are convertible to <code>Bit</code> such as <code>bool</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i8\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#88\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_i8\" class=\"fn\">from_i8</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>i8</code> value with a bit-width of 8.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u8\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#94\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_u8\" class=\"fn\">from_u8</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>u8</code> value with a bit-width of 8.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i16\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#100\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_i16\" class=\"fn\">from_i16</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>i16</code> value with a bit-width of 16.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u16\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#106\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_u16\" class=\"fn\">from_u16</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>u16</code> value with a bit-width of 16.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i32\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#112\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_i32\" class=\"fn\">from_i32</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>i32</code> value with a bit-width of 32.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u32\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#118\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_u32\" class=\"fn\">from_u32</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>u32</code> value with a bit-width of 32.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i64\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#124\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_i64\" class=\"fn\">from_i64</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>i64</code> value with a bit-width of 64.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#130\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_u64\" class=\"fn\">from_u64</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>u64</code> value with a bit-width of 64.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#136\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_i128\" class=\"fn\">from_i128</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>i128</code> value with a bit-width of 128.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#141\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_u128\" class=\"fn\">from_u128</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> from a given <code>u128</code> value with a bit-width of 128.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#217\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.zero\" class=\"fn\">zero</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> with the given bit width that represents zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#222\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.one\" class=\"fn\">one</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> with the given bit width that represents one.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all_unset\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#229\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.all_unset\" class=\"fn\">all_unset</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> with the given bit width that has all bits unset.</p>\n<p><strong>Note:</strong> This is equal to calling <code>ApInt::zero</code> with the given <code>width</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all_set\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#234\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.all_set\" class=\"fn\">all_set</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> with the given bit width that has all bits set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_min_value\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#239\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.unsigned_min_value\" class=\"fn\">unsigned_min_value</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest unsigned <code>ApInt</code> that can be represented by the given <code>BitWidth</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_max_value\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#244\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.unsigned_max_value\" class=\"fn\">unsigned_max_value</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Returns the largest unsigned <code>ApInt</code> that can be represented by the given <code>BitWidth</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_min_value\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#249\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.signed_min_value\" class=\"fn\">signed_min_value</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest signed <code>ApInt</code> that can be represented by the given <code>BitWidth</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_max_value\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#256\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.signed_max_value\" class=\"fn\">signed_max_value</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Returns the largest signed <code>ApInt</code> that can be represented by the given <code>BitWidth</code>.</p>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#33\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"assignment-operations\"><a href=\"#assignment-operations\">Assignment Operations</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#40\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.assign\" class=\"fn\">assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class=\"docblock\"><p>Assigns <code>rhs</code> to this <code>ApInt</code>.</p>\n<p>This mutates digits and may affect the bitwidth of <code>self</code>\nwhich <strong>might result in an expensive operations</strong>.</p>\n<p>After this operation <code>rhs</code> and <code>self</code> are equal to each other.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#90\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.strict_assign\" class=\"fn\">strict_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Strictly assigns <code>rhs</code> to this <code>ApInt</code>.</p>\n<p>After this operation <code>rhs</code> and <code>self</code> are equal to each other.</p>\n<p><strong>Note:</strong> Strict assigns protect against mutating the bit width\nof <code>self</code> and thus return an error instead of executing a probably\nexpensive <code>assign</code> operation.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If <code>rhs</code> and <code>self</code> have unmatching bit widths.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#104\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"casting-truncation--extension\"><a href=\"#casting-truncation--extension\">Casting: Truncation &amp; Extension</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_truncate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#117-118\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_truncate\" class=\"fn\">into_truncate</a>&lt;W&gt;(self, target_width: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Tries to truncate this <code>ApInt</code> inplace to the given <code>target_width</code>\nand returns the result.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<ul>\n<li>This is useful for method chaining.</li>\n<li>For more details look into\n<a href=\"struct.ApInt.html#method.truncate\"><code>truncate</code></a>.</li>\n</ul>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If the <code>target_width</code> is greater than the current width.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#134-135\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.truncate\" class=\"fn\">truncate</a>&lt;W&gt;(&amp;mut self, target_width: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Tries to truncate this <code>ApInt</code> inplace to the given <code>target_width</code>.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<ul>\n<li>This is a no-op if <code>self.width()</code> and <code>target_width</code> are equal.</li>\n<li>This operation is inplace as long as <code>self.width()</code> and <code>target_width</code>\nrequire the same amount of digits for their representation.</li>\n</ul>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<ul>\n<li>If the <code>target_width</code> is greater than the current width.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_zero_extend\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#216-217\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_zero_extend\" class=\"fn\">into_zero_extend</a>&lt;W&gt;(self, target_width: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Tries to zero-extend this <code>ApInt</code> inplace to the given <code>target_width</code>\nand returns the result.</p>\n<h5 id=\"note-2\"><a href=\"#note-2\">Note</a></h5>\n<ul>\n<li>This is useful for method chaining.</li>\n<li>For more details look into\n<a href=\"struct.ApInt.html#method.zero_extend\"><code>zero_extend</code></a>.</li>\n</ul>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<ul>\n<li>If the <code>target_width</code> is less than the current width.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_extend\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#233-234\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.zero_extend\" class=\"fn\">zero_extend</a>&lt;W&gt;(&amp;mut self, target_width: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Tries to zero-extend this <code>ApInt</code> inplace to the given <code>target_width</code>.</p>\n<h5 id=\"note-3\"><a href=\"#note-3\">Note</a></h5>\n<ul>\n<li>This is a no-op if <code>self.width()</code> and <code>target_width</code> are equal.</li>\n<li>This operation is inplace as long as <code>self.width()</code> and <code>target_width</code>\nrequire the same amount of digits for their representation.</li>\n</ul>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<ul>\n<li>If the <code>target_width</code> is less than the current width.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_sign_extend\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#299-300\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_sign_extend\" class=\"fn\">into_sign_extend</a>&lt;W&gt;(self, target_width: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Tries to sign-extend this <code>ApInt</code> inplace to the given <code>target_width</code>\nand returns the result.</p>\n<h5 id=\"note-4\"><a href=\"#note-4\">Note</a></h5>\n<ul>\n<li>This is useful for method chaining.</li>\n<li>For more details look into\n<a href=\"struct.ApInt.html#method.sign_extend\"><code>sign_extend</code></a>.</li>\n</ul>\n<h5 id=\"errors-4\"><a href=\"#errors-4\">Errors</a></h5>\n<ul>\n<li>If the <code>target_width</code> is less than the current width.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sign_extend\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#316-317\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.sign_extend\" class=\"fn\">sign_extend</a>&lt;W&gt;(&amp;mut self, target_width: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Tries to sign-extend this <code>ApInt</code> inplace to the given <code>target_width</code>.</p>\n<h5 id=\"note-5\"><a href=\"#note-5\">Note</a></h5>\n<ul>\n<li>This is a no-op if <code>self.width()</code> and <code>target_width</code> are equal.</li>\n<li>This operation is inplace as long as <code>self.width()</code> and <code>target_width</code>\nrequire the same amount of digits for their representation.</li>\n</ul>\n<h5 id=\"errors-5\"><a href=\"#errors-5\">Errors</a></h5>\n<ul>\n<li>If the <code>target_width</code> is less than the current width.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_zero_resize\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#402-403\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_zero_resize\" class=\"fn\">into_zero_resize</a>&lt;W&gt;(self, target_width: W) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a><span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Zero-resizes this <code>ApInt</code> to the given <code>target_width</code>\nand returns the result.</p>\n<h5 id=\"note-6\"><a href=\"#note-6\">Note</a></h5>\n<ul>\n<li>This is useful for method chaining.</li>\n<li>For more details look into\n<a href=\"struct.ApInt.html#method.zero_resize\"><code>zero_resize</code></a>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_sign_resize\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#416-417\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_sign_resize\" class=\"fn\">into_sign_resize</a>&lt;W&gt;(self, target_width: W) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a><span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sign-resizes this <code>ApInt</code> to the given <code>target_width</code>\nand returns the result.</p>\n<h5 id=\"note-7\"><a href=\"#note-7\">Note</a></h5>\n<ul>\n<li>This is useful for method chaining.</li>\n<li>For more details look into\n<a href=\"struct.ApInt.html#method.sign_resize\"><code>sign_resize</code></a>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_resize\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#433-434\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.zero_resize\" class=\"fn\">zero_resize</a>&lt;W&gt;(&amp;mut self, target_width: W)<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Zero-resizes the given <code>ApInt</code> inplace.</p>\n<h5 id=\"note-8\"><a href=\"#note-8\">Note</a></h5>\n<p>This operation will forward to</p>\n<ul>\n<li><a href=\"struct.ApInt.html#method.truncate\"><code>truncate</code></a>\nif <code>target_width</code> is less than or equal to the width of\nthe given <code>ApInt</code></li>\n<li><a href=\"struct.ApInt.html#method.zero_extend\"><code>zero_extend</code></a>\notherwise</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sign_resize\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#462-463\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.sign_resize\" class=\"fn\">sign_resize</a>&lt;W&gt;(&amp;mut self, target_width: W)<span class=\"where fmt-newline\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sign-resizes the given <code>ApInt</code> inplace.</p>\n<h5 id=\"note-9\"><a href=\"#note-9\">Note</a></h5>\n<p>This operation will forward to</p>\n<ul>\n<li><a href=\"struct.ApInt.html#method.truncate\"><code>truncate</code></a>\nif <code>target_width</code> is less than or equal to the width of\nthe given <code>ApInt</code></li>\n<li><a href=\"struct.ApInt.html#method.sign_extend\"><code>sign_extend</code></a>\notherwise</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#81\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"utility--helper-methods\"><a href=\"#utility--helper-methods\">Utility &amp; Helper Methods</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#308\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>ApInt</code> represents the value zero (<code>0</code>).</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<ul>\n<li>Zero (<code>0</code>) is also called the additive neutral element.</li>\n<li>This operation is more efficient than comparing two instances\nof <code>ApInt</code> for the same reason.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#324\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>ApInt</code> represents the value one (<code>1</code>).</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<ul>\n<li>One (<code>1</code>) is also called the multiplicative neutral element.</li>\n<li>This operation is more efficient than comparing two instances\nof <code>ApInt</code> for the same reason.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_even\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#339\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.is_even\" class=\"fn\">is_even</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>ApInt</code> represents an even number.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_odd\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#345\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.is_odd\" class=\"fn\">is_odd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>ApInt</code> represents an odd number.</p>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#25\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"bitwise-operations\"><a href=\"#bitwise-operations\">Bitwise Operations</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bitnot\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#27\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_bitnot\" class=\"fn\">into_bitnot</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Flips all bits of <code>self</code> and returns the result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitnot\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#32\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.bitnot\" class=\"fn\">bitnot</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Flip all bits of this <code>ApInt</code> inplace.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_bitand\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#46\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_bitand\" class=\"fn\">into_checked_bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to bit-and assign this <code>ApInt</code> inplace to <code>rhs</code>\nand returns the result.</p>\n<p><strong>Note:</strong> This forwards to\n<a href=\"struct.ApInt.html#method.checked_bitand\"><code>checked_bitand</code></a>.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_bitand_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#57\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_bitand_assign\" class=\"fn\">checked_bitand_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Bit-and assigns all bits of this <code>ApInt</code> with the bits of <code>rhs</code>.</p>\n<p><strong>Note:</strong> This operation is inplace of <code>self</code> and wonโt allocate memory.</p>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<p>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_bitor\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#70\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_bitor\" class=\"fn\">into_checked_bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to bit-and assign this <code>ApInt</code> inplace to <code>rhs</code>\nand returns the result.</p>\n<p><strong>Note:</strong> This forwards to\n<a href=\"struct.ApInt.html#method.checked_bitor\"><code>checked_bitor</code></a>.</p>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<p>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_bitor_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#81\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_bitor_assign\" class=\"fn\">checked_bitor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Bit-or assigns all bits of this <code>ApInt</code> with the bits of <code>rhs</code>.</p>\n<p><strong>Note:</strong> This operation is inplace of <code>self</code> and wonโt allocate memory.</p>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<p>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_bitxor\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#94\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_bitxor\" class=\"fn\">into_checked_bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to bit-xor assign this <code>ApInt</code> inplace to <code>rhs</code>\nand returns the result.</p>\n<p><strong>Note:</strong> This forwards to\n<a href=\"struct.ApInt.html#method.checked_bitxor\"><code>checked_bitxor</code></a>.</p>\n<h5 id=\"errors-4\"><a href=\"#errors-4\">Errors</a></h5>\n<p>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_bitxor_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#105\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_bitxor_assign\" class=\"fn\">checked_bitxor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Bit-xor assigns all bits of this <code>ApInt</code> with the bits of <code>rhs</code>.</p>\n<p><strong>Note:</strong> This operation is inplace of <code>self</code> and wonโt allocate memory.</p>\n<h5 id=\"errors-5\"><a href=\"#errors-5\">Errors</a></h5>\n<p>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</p>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#111\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"bitwise-access\"><a href=\"#bitwise-access\">Bitwise Access</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_bit_at\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#122-123\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.get_bit_at\" class=\"fn\">get_bit_at</a>&lt;P&gt;(&amp;self, pos: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://docs.rs/crate/apint/0.2.0/apint/digit/enum.Bit.html\" title=\"enum apint::digit::Bit\">Bit</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitpos/struct.BitPos.html\" title=\"struct apint::bitpos::BitPos\">BitPos</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns the bit at the given bit position <code>pos</code>.</p>\n<p>This returns</p>\n<ul>\n<li><code>Bit::Set</code> if the bit at <code>pos</code> is <code>1</code></li>\n<li><code>Bit::Unset</code> otherwise</li>\n</ul>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If <code>pos</code> is not a valid bit position for the width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_bit_at\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#141-142\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.set_bit_at\" class=\"fn\">set_bit_at</a>&lt;P&gt;(&amp;mut self, pos: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitpos/struct.BitPos.html\" title=\"struct apint::bitpos::BitPos\">BitPos</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the bit at the given bit position <code>pos</code> to one (<code>1</code>).</p>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<ul>\n<li>If <code>pos</code> is not a valid bit position for the width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_bit_at\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#160-161\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.unset_bit_at\" class=\"fn\">unset_bit_at</a>&lt;P&gt;(&amp;mut self, pos: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitpos/struct.BitPos.html\" title=\"struct apint::bitpos::BitPos\">BitPos</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the bit at the given bit position <code>pos</code> to zero (<code>0</code>).</p>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<ul>\n<li>If <code>pos</code> is not a valid bit position for the width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flip_bit_at\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#184-185\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.flip_bit_at\" class=\"fn\">flip_bit_at</a>&lt;P&gt;(&amp;mut self, pos: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitpos/struct.BitPos.html\" title=\"struct apint::bitpos::BitPos\">BitPos</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Flips the bit at the given bit position <code>pos</code>.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<ul>\n<li>If the bit at the given position was <code>0</code> it will be <code>1</code>\nafter this operation and vice versa.</li>\n</ul>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<ul>\n<li>If <code>pos</code> is not a valid bit position for the width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_all\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#199\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.set_all\" class=\"fn\">set_all</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Sets all bits of this <code>ApInt</code> to one (<code>1</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_all_set\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#205\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.is_all_set\" class=\"fn\">is_all_set</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns``true<code>if all bits in the</code>ApInt` are set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_all\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#216\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.unset_all\" class=\"fn\">unset_all</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Sets all bits of this <code>ApInt</code> to zero (<code>0</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_all_unset\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#221\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.is_all_unset\" class=\"fn\">is_all_unset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if all bits in the <code>ApInt</code> are unset.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flip_all\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#226\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.flip_all\" class=\"fn\">flip_all</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Flips all bits of this <code>ApInt</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sign_bit\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#235\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.sign_bit\" class=\"fn\">sign_bit</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://docs.rs/crate/apint/0.2.0/apint/digit/enum.Bit.html\" title=\"enum apint::digit::Bit\">Bit</a></h4></section></summary><div class=\"docblock\"><p>Returns the sign bit of this <code>ApInt</code>.</p>\n<p><strong>Note:</strong> This is equal to the most significant bit of this <code>ApInt</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_sign_bit\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#240\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.set_sign_bit\" class=\"fn\">set_sign_bit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Sets the sign bit of this <code>ApInt</code> to one (<code>1</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_sign_bit\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#248\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.unset_sign_bit\" class=\"fn\">unset_sign_bit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Sets the sign bit of this <code>ApInt</code> to zero (<code>0</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flip_sign_bit\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#262\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.flip_sign_bit\" class=\"fn\">flip_sign_bit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Flips the sign bit of this <code>ApInt</code>.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<ul>\n<li>If the sign bit was <code>0</code> it will be <code>1</code> after this operation and vice versa.</li>\n<li>Depending on the interpretation of the <code>ApInt</code> this\noperation changes its signedness.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#271\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"bitwise-utility-methods\"><a href=\"#bitwise-utility-methods\">Bitwise utility methods.</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#273\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of this <code>ApInt</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#281\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of this <code>ApInt</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#293\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of this <code>ApInt</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#306\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of this <code>ApInt</code>.</p>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#25\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"comparison-operations\"><a href=\"#comparison-operations\">Comparison Operations</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ult\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#37\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_ult\" class=\"fn\">checked_ult</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Unsigned less-than (<code>ult</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &lt; rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>unsigned</strong> values.</li>\n</ul>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ule\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#76\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_ule\" class=\"fn\">checked_ule</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Unsigned less-equals (<code>ule</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &lt;= rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>unsigned</strong> values.</li>\n</ul>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ugt\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#97\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_ugt\" class=\"fn\">checked_ugt</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Unsigned greater-than (<code>ugt</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-2\"><a href=\"#note-2\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &gt; rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>unsigned</strong> values.</li>\n</ul>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_uge\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#118\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_uge\" class=\"fn\">checked_uge</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Unsigned greater-equals (<code>uge</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-3\"><a href=\"#note-3\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &gt;= rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>unsigned</strong> values.</li>\n</ul>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_slt\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#138\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_slt\" class=\"fn\">checked_slt</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Signed less-than (<code>slt</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-4\"><a href=\"#note-4\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &lt; rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>signed</strong> values.</li>\n</ul>\n<h5 id=\"errors-4\"><a href=\"#errors-4\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sle\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#177\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_sle\" class=\"fn\">checked_sle</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Signed less-equals (<code>sle</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-5\"><a href=\"#note-5\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &lt;= rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>signed</strong> values.</li>\n</ul>\n<h5 id=\"errors-5\"><a href=\"#errors-5\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sgt\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#198\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_sgt\" class=\"fn\">checked_sgt</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Signed greater-than (<code>sgt</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-6\"><a href=\"#note-6\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &gt; rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>signed</strong> values.</li>\n</ul>\n<h5 id=\"errors-6\"><a href=\"#errors-6\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sge\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#219\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_sge\" class=\"fn\">checked_sge</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Signed greater-equals (<code>sge</code>) comparison between <code>self</code> and <code>rhs</code>.</p>\n<h5 id=\"note-7\"><a href=\"#note-7\">Note</a></h5>\n<ul>\n<li>Returns <code>Ok(true)</code> if <code>self &gt;= rhs</code>.</li>\n<li>Interprets both <code>ApInt</code> instances as <strong>signed</strong> values.</li>\n</ul>\n<h5 id=\"errors-7\"><a href=\"#errors-7\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#20\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"arithmetic-operations\"><a href=\"#arithmetic-operations\">Arithmetic Operations</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_negate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#25\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_negate\" class=\"fn\">into_negate</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Negates this <code>ApInt</code> inplace and returns the result.</p>\n<p><strong>Note:</strong> This will <strong>not</strong> allocate memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.negate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#32\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.negate\" class=\"fn\">negate</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Negates this <code>ApInt</code> inplace.</p>\n<p><strong>Note:</strong> This will <strong>not</strong> allocate memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_add\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#52\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_add\" class=\"fn\">into_checked_add</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds <code>rhs</code> to <code>self</code> and returns the result.</p>\n<p><strong>Note:</strong> This will <strong>not</strong> allocate memory.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#63\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_add_assign\" class=\"fn\">checked_add_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Add-assigns <code>rhs</code> to <code>self</code> inplace.</p>\n<p><strong>Note:</strong> This will <strong>not</strong> allocate memory.</p>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_sub\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#93\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_sub\" class=\"fn\">into_checked_sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Subtracts <code>rhs</code> from <code>self</code> and returns the result.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<p>In the low-level bit-wise representation there is no difference between signed\nand unsigned subtraction of fixed bit-width integers. (Cite: LLVM)</p>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#107\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_sub_assign\" class=\"fn\">checked_sub_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Subtract-assigns <code>rhs</code> from <code>self</code> inplace.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<p>In the low-level bit-wise representation there is no difference between signed\nand unsigned subtraction of fixed bit-width integers. (Cite: LLVM)</p>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#137\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_mul\" class=\"fn\">into_checked_mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies <code>rhs</code> with <code>self</code> and returns the result.</p>\n<h5 id=\"note-2\"><a href=\"#note-2\">Note</a></h5>\n<p>In the low-level bit-wise representation there is no difference between signed\nand unsigned multiplication of fixed bit-width integers. (Cite: LLVM)</p>\n<h5 id=\"errors-4\"><a href=\"#errors-4\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#151\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_mul_assign\" class=\"fn\">checked_mul_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiply-assigns <code>rhs</code> to <code>self</code> inplace.</p>\n<h5 id=\"note-3\"><a href=\"#note-3\">Note</a></h5>\n<p>In the low-level bit-wise representation there is no difference between signed\nand unsigned multiplication of fixed bit-width integers. (Cite: LLVM)</p>\n<h5 id=\"errors-5\"><a href=\"#errors-5\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_udiv\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#178\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_udiv\" class=\"fn\">into_checked_udiv</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Divides <code>self</code> by <code>rhs</code> using <strong>unsigned</strong> interpretation and returns the result.</p>\n<h5 id=\"note-4\"><a href=\"#note-4\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-6\"><a href=\"#errors-6\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_udiv_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#194\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_udiv_assign\" class=\"fn\">checked_udiv_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Assignes <code>self</code> to the division of <code>self</code> by <code>rhs</code> using <strong>unsigned</strong>\ninterpretation of the values.</p>\n<h5 id=\"note-5\"><a href=\"#note-5\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-7\"><a href=\"#errors-7\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_sdiv\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#223\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_sdiv\" class=\"fn\">into_checked_sdiv</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Divides <code>self</code> by <code>rhs</code> using <strong>signed</strong> interpretation and returns the result.</p>\n<h5 id=\"note-6\"><a href=\"#note-6\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-8\"><a href=\"#errors-8\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sdiv_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#239\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_sdiv_assign\" class=\"fn\">checked_sdiv_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Assignes <code>self</code> to the division of <code>self</code> by <code>rhs</code> using <strong>signed</strong>\ninterpretation of the values.</p>\n<h5 id=\"note-7\"><a href=\"#note-7\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-9\"><a href=\"#errors-9\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_urem\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#274\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_urem\" class=\"fn\">into_checked_urem</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the <strong>unsigned</strong> remainder of <code>self</code> by <code>rhs</code> and returns the result.</p>\n<h5 id=\"note-8\"><a href=\"#note-8\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-10\"><a href=\"#errors-10\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_urem_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#289\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_urem_assign\" class=\"fn\">checked_urem_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Assignes <code>self</code> to the <strong>unsigned</strong> remainder of <code>self</code> by <code>rhs</code>.</p>\n<h5 id=\"note-9\"><a href=\"#note-9\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-11\"><a href=\"#errors-11\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_srem\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#318\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_srem\" class=\"fn\">into_checked_srem</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the <strong>signed</strong> remainder of <code>self</code> by <code>rhs</code> and returns the result.</p>\n<h5 id=\"note-10\"><a href=\"#note-10\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-12\"><a href=\"#errors-12\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_srem_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#333\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_srem_assign\" class=\"fn\">checked_srem_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Assignes <code>self</code> to the <strong>signed</strong> remainder of <code>self</code> by <code>rhs</code>.</p>\n<h5 id=\"note-11\"><a href=\"#note-11\">Note</a></h5>\n<ul>\n<li>This operation will <strong>not</strong> allocate memory and computes inplace of <code>self</code>.</li>\n<li>In the low-level machine abstraction signed division and unsigned division\nare two different operations.</li>\n</ul>\n<h5 id=\"errors-13\"><a href=\"#errors-13\">Errors</a></h5>\n<ul>\n<li>If <code>self</code> and <code>rhs</code> have unmatching bit widths.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#66\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"shift-operations\"><a href=\"#shift-operations\">Shift Operations</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#75-76\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_shl_assign\" class=\"fn\">checked_shl_assign</a>&lt;S&gt;(&amp;mut self, shift_amount: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/shift/struct.ShiftAmount.html\" title=\"struct apint::apint::shift::ShiftAmount\">ShiftAmount</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Shift this <code>ApInt</code> left by the given <code>shift_amount</code> bits.</p>\n<p>This operation is inplace and will <strong>not</strong> allocate memory.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If the given <code>shift_amount</code> is invalid for the bit width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_shl\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#123-124\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_shl\" class=\"fn\">into_checked_shl</a>&lt;S&gt;(self, shift_amount: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/shift/struct.ShiftAmount.html\" title=\"struct apint::apint::shift::ShiftAmount\">ShiftAmount</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Shift this <code>ApInt</code> left by the given <code>shift_amount</code> bits and returns the result.</p>\n<p>This operation is inplace and will <strong>not</strong> allocate memory.</p>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<ul>\n<li>If the given <code>shift_amount</code> is invalid for the bit width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_lshr_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#136-137\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_lshr_assign\" class=\"fn\">checked_lshr_assign</a>&lt;S&gt;(&amp;mut self, shift_amount: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/shift/struct.ShiftAmount.html\" title=\"struct apint::apint::shift::ShiftAmount\">ShiftAmount</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Logically right-shifts this <code>ApInt</code> by the given <code>shift_amount</code> bits.</p>\n<p>This operation is inplace and will <strong>not</strong> allocate memory.</p>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<ul>\n<li>If the given <code>shift_amount</code> is invalid for the bit width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_lshr\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#177-178\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_lshr\" class=\"fn\">into_checked_lshr</a>&lt;S&gt;(self, shift_amount: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/shift/struct.ShiftAmount.html\" title=\"struct apint::apint::shift::ShiftAmount\">ShiftAmount</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Logically right-shifts this <code>ApInt</code> by the given <code>shift_amount</code> bits\nand returns the result.</p>\n<p>This operation is inplace and will <strong>not</strong> allocate memory.</p>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<ul>\n<li>If the given <code>shift_amount</code> is invalid for the bit width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ashr_assign\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#194-195\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.checked_ashr_assign\" class=\"fn\">checked_ashr_assign</a>&lt;S&gt;(&amp;mut self, shift_amount: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/shift/struct.ShiftAmount.html\" title=\"struct apint::apint::shift::ShiftAmount\">ShiftAmount</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Arithmetically right-shifts this <code>ApInt</code> by the given <code>shift_amount</code> bits.</p>\n<p>This operation is inplace and will <strong>not</strong> allocate memory.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<p>Arithmetic shifting copies the sign bit instead of filling up with zeros.</p>\n<h5 id=\"errors-4\"><a href=\"#errors-4\">Errors</a></h5>\n<ul>\n<li>If the given <code>shift_amount</code> is invalid for the bit width of this <code>ApInt</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_checked_ashr\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/shift.rs.html#248-249\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.into_checked_ashr\" class=\"fn\">into_checked_ashr</a>&lt;S&gt;(self, shift_amount: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/shift/struct.ShiftAmount.html\" title=\"struct apint::apint::shift::ShiftAmount\">ShiftAmount</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Arithmetically right-shifts this <code>ApInt</code> by the given <code>shift_amount</code> bits\nand returns the result.</p>\n<p>This operation is inplace and will <strong>not</strong> allocate memory.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<p>Arithmetic shifting copies the sign bit instead of filling up with zeros.</p>\n<h5 id=\"errors-5\"><a href=\"#errors-5\">Errors</a></h5>\n<ul>\n<li>If the given <code>shift_amount</code> is invalid for the bit width of this <code>ApInt</code>.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#79\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"deserialization\"><a href=\"#deserialization\">Deserialization</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#109-111\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>&lt;R, S&gt;(radix: R, input: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/radix/struct.Radix.html\" title=\"struct apint::radix::Radix\">Radix</a>&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Parses the given <code>input</code> <code>String</code> with the given <code>Radix</code> and returns an <code>ApInt</code>\nwith the given <code>target_width</code> <code>BitWidth</code>.</p>\n<p><strong>Note:</strong> The given <code>input</code> is parsed as big-endian value. This means, the most significant bit (MSB)\nis the leftst bit in the string representation provided by the user.</p>\n<p>The string is assumed to contain no whitespace and contain only values within a subset of the \nrange of <code>0</code>..<code>9</code> and <code>a</code>..<code>z</code> depending on the given <code>radix</code>.</p>\n<p>The string is assumed to have no sign as <code>ApInt</code> does not handle signdness.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If <code>input</code> is empty.</li>\n<li>If <code>input</code> is not a valid representation for an <code>ApInt</code> for the given <code>radix</code>.</li>\n<li>If <code>input</code> has trailing zero characters (<code>0</code>), e.g. <code>&quot;0042&quot;</code> instead of <code>&quot;42&quot;</code>.</li>\n<li>If <code>input</code> represents an <code>ApInt</code> value that does not fit into the given <code>target_bitwidth</code>.</li>\n</ul>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = ApInt::from_str_radix(<span class=\"number\">10</span>, <span class=\"string\">&quot;42&quot;</span>);      <span class=\"comment\">// ok\n</span><span class=\"kw\">let </span>b = ApInt::from_str_radix( <span class=\"number\">2</span>, <span class=\"string\">&quot;1011011&quot;</span>); <span class=\"comment\">// ok (dec. = 91)\n</span><span class=\"kw\">let </span>c = ApInt::from_str_radix(<span class=\"number\">16</span>, <span class=\"string\">&quot;ffcc00&quot;</span>);  <span class=\"comment\">// ok (dec. = 16763904)\n</span><span class=\"kw\">let </span>c = ApInt::from_str_radix(<span class=\"number\">10</span>, <span class=\"string\">&quot;256&quot;</span>);     <span class=\"comment\">// Error: 256 does not fit within 8 bits!\n</span><span class=\"kw\">let </span>d = ApInt::from_str_radix( <span class=\"number\">2</span>, <span class=\"string\">&quot;01020&quot;</span>);   <span class=\"comment\">// Error: Invalid digit &#39;2&#39; at position 3 for given radix.\n</span><span class=\"kw\">let </span>e = ApInt::from_str_radix(<span class=\"number\">16</span>, <span class=\"string\">&quot;hello&quot;</span>);   <span class=\"comment\">// Error: &quot;hello&quot; is not a valid ApInt representation!</span></code></pre></div>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#291\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"serialization\"><a href=\"#serialization\">Serialization</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_string_with_radix\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#293-294\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.as_string_with_radix\" class=\"fn\">as_string_with_radix</a>&lt;R&gt;(&amp;self, radix: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/radix/struct.Radix.html\" title=\"struct apint::radix::Radix\">Radix</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a <code>String</code> representation of the binary encoded <code>ApInt</code> for the given <code>Radix</code>.</p>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#122\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"operations-to-lossful-cast-to-primitive-number-types\"><a href=\"#operations-to-lossful-cast-to-primitive-number-types\">Operations to lossful cast to primitive number types.</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_bool\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#163\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_bool\" class=\"fn\">resize_to_bool</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>bool</code> primitive type.</p>\n<p>Bits in this <code>ApInt</code> that are not within the bounds\nof the <code>bool</code> are being ignored.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<ul>\n<li>Basically this returns <code>true</code> if the least significant\nbit of this <code>ApInt</code> is <code>1</code> and <code>false</code> otherwise.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_i8\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#182\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_i8\" class=\"fn\">resize_to_i8</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>i8</code> primitive type.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>8</code> bits the value is\nsign extended to the target bit width.</li>\n<li>All bits but the least significant <code>8</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_u8\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#193\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_u8\" class=\"fn\">resize_to_u8</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>u8</code> primitive type.</p>\n<h5 id=\"note-2\"><a href=\"#note-2\">Note</a></h5>\n<ul>\n<li>All bits but the least significant <code>8</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_i16\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#208\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_i16\" class=\"fn\">resize_to_i16</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>i16</code> primitive type.</p>\n<h5 id=\"note-3\"><a href=\"#note-3\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>16</code> bits the value is\nsign extended to the target bit width.</li>\n<li>All bits but the least significant <code>16</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_u16\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#219\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_u16\" class=\"fn\">resize_to_u16</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>u16</code> primitive type.</p>\n<h5 id=\"note-4\"><a href=\"#note-4\">Note</a></h5>\n<ul>\n<li>All bits but the least significant <code>16</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_i32\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#234\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_i32\" class=\"fn\">resize_to_i32</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>i32</code> primitive type.</p>\n<h5 id=\"note-5\"><a href=\"#note-5\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>32</code> bits the value is\nsign extended to the target bit width.</li>\n<li>All bits but the least significant <code>32</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_u32\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#245\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_u32\" class=\"fn\">resize_to_u32</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>u32</code> primitive type.</p>\n<h5 id=\"note-6\"><a href=\"#note-6\">Note</a></h5>\n<ul>\n<li>All bits but the least significant <code>32</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_i64\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#260\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_i64\" class=\"fn\">resize_to_i64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>i64</code> primitive type.</p>\n<h5 id=\"note-7\"><a href=\"#note-7\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>64</code> bits the value is\nsign extended to the target bit width.</li>\n<li>All bits but the least significant <code>64</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_u64\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#271\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_u64\" class=\"fn\">resize_to_u64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>u64</code> primitive type.</p>\n<h5 id=\"note-8\"><a href=\"#note-8\">Note</a></h5>\n<ul>\n<li>All bits but the least significant <code>64</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_i128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#286\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_i128\" class=\"fn\">resize_to_i128</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>i128</code> primitive type.</p>\n<h5 id=\"note-9\"><a href=\"#note-9\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>128</code> bits the value is\nsign extended to the target bit width.</li>\n<li>All bits but the least significant <code>128</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_to_u128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#312\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.resize_to_u128\" class=\"fn\">resize_to_u128</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Resizes this <code>ApInt</code> to a <code>u128</code> primitive type.</p>\n<h5 id=\"note-10\"><a href=\"#note-10\">Note</a></h5>\n<ul>\n<li>All bits but the least significant <code>128</code> bits are\nbeing ignored by this operation to construct the\nresult.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#322\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"operations-to-lossless-cast-to-primitive-number-types\"><a href=\"#operations-to-lossless-cast-to-primitive-number-types\">Operations to lossless cast to primitive number types.</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_bool\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#377\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_bool\" class=\"fn\">try_to_bool</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>bool</code>.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<p>This returns <code>true</code> if the value represented by this <code>ApInt</code>\nis <code>1</code>, returns <code>false</code> if the value represented by this\n<code>ApInt</code> is <code>0</code> and returns an error otherwise.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>bool</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_i8\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#400\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_i8\" class=\"fn\">try_to_i8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>i8</code>.</p>\n<h5 id=\"note-1\"><a href=\"#note-1\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>8</code> bits the value is\nsign extended to the target bit width.</li>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u8</code>.</li>\n</ul>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>i8</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_u8\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#415\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_u8\" class=\"fn\">try_to_u8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>u8</code>.</p>\n<h5 id=\"note-2\"><a href=\"#note-2\">Note</a></h5>\n<ul>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u8</code>.</li>\n</ul>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>u8</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_i16\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#434\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_i16\" class=\"fn\">try_to_i16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>i16</code>.</p>\n<h5 id=\"note-3\"><a href=\"#note-3\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>16</code> bits the value is\nsign extended to the target bit width.</li>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u16</code>.</li>\n</ul>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>i16</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_u16\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#449\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_u16\" class=\"fn\">try_to_u16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>u16</code>.</p>\n<h5 id=\"note-4\"><a href=\"#note-4\">Note</a></h5>\n<ul>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u16</code>.</li>\n</ul>\n<h5 id=\"errors-4\"><a href=\"#errors-4\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>u16</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_i32\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#468\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_i32\" class=\"fn\">try_to_i32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>i32</code>.</p>\n<h5 id=\"note-5\"><a href=\"#note-5\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>32</code> bits the value is\nsign extended to the target bit width.</li>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u32</code>.</li>\n</ul>\n<h5 id=\"errors-5\"><a href=\"#errors-5\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>i32</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_u32\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#483\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_u32\" class=\"fn\">try_to_u32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>u32</code>.</p>\n<h5 id=\"note-6\"><a href=\"#note-6\">Note</a></h5>\n<ul>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u32</code>.</li>\n</ul>\n<h5 id=\"errors-6\"><a href=\"#errors-6\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>u32</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_i64\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#502\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_i64\" class=\"fn\">try_to_i64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>i64</code>.</p>\n<h5 id=\"note-7\"><a href=\"#note-7\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>64</code> bits the value is\nsign extended to the target bit width.</li>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u64</code>.</li>\n</ul>\n<h5 id=\"errors-7\"><a href=\"#errors-7\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>i64</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_u64\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#517\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_u64\" class=\"fn\">try_to_u64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>u64</code>.</p>\n<h5 id=\"note-8\"><a href=\"#note-8\">Note</a></h5>\n<ul>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u64</code>.</li>\n</ul>\n<h5 id=\"errors-8\"><a href=\"#errors-8\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>u64</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_i128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#536\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_i128\" class=\"fn\">try_to_i128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>i128</code>.</p>\n<h5 id=\"note-9\"><a href=\"#note-9\">Note</a></h5>\n<ul>\n<li>This operation will conserve the signedness of the\nvalue. This means that for <code>ApInt</code> instances with\na <code>BitWidth</code> less than <code>128</code> bits the value is\nsign extended to the target bit width.</li>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u128</code>.</li>\n</ul>\n<h5 id=\"errors-9\"><a href=\"#errors-9\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>i128</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_to_u128\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/to_primitive.rs.html#574\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.try_to_u128\" class=\"fn\">try_to_u128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>, <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/errors/struct.Error.html\" title=\"struct apint::errors::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to represent the value of this <code>ApInt</code> as a <code>u128</code>.</p>\n<h5 id=\"note-10\"><a href=\"#note-10\">Note</a></h5>\n<ul>\n<li>This conversion is possible as long as the value represented\nby this <code>ApInt</code> does not exceed the maximum value of <code>u128</code>.</li>\n</ul>\n<h5 id=\"complexity\"><a href=\"#complexity\">Complexity</a></h5>\n<ul>\n<li>๐ช(n) where n is the number of digits of this <code>ApInt</code>.</li>\n</ul>\n<h5 id=\"errors-10\"><a href=\"#errors-10\">Errors</a></h5>\n<ul>\n<li>If the value represented by this <code>ApInt</code> can not be\nrepresented by a <code>u128</code>.</li>\n</ul>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/rand_impl.rs.html#15\">source</a><a href=\"#impl-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"docblock\"><h4 id=\"random-utilities-using-rand-crate\"><a href=\"#random-utilities-using-rand-crate\">Random Utilities using <code>rand</code> crate.</a></h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.random_with_width\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/rand_impl.rs.html#17\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.random_with_width\" class=\"fn\">random_with_width</a>(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> with the given <code>BitWidth</code> and random <code>Digit</code>s.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.random_with_width_using\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/rand_impl.rs.html#25-26\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.random_with_width_using\" class=\"fn\">random_with_width_using</a>&lt;R&gt;(width: <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a>, rng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a><span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/rand/0.4/rand/trait.Rng.html\" title=\"trait rand::Rng\">Rng</a>,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ApInt</code> with the given <code>BitWidth</code> and random <code>Digit</code>s\nusing the given random number generator.</p>\n<p><strong>Note:</strong> This is useful for cryptographic or testing purposes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.randomize\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/rand_impl.rs.html#42\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.randomize\" class=\"fn\">randomize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Randomizes the digits of this <code>ApInt</code> inplace.</p>\n<p>This wonโt change its <code>BitWidth</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.randomize_using\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/rand_impl.rs.html#50-51\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html#tymethod.randomize_using\" class=\"fn\">randomize_using</a>&lt;R&gt;(&amp;mut self, rng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut R</a>)<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/rand/0.4/rand/trait.Rng.html\" title=\"trait rand::Rng\">Rng</a>,</span></h4></section></summary><div class=\"docblock\"><p>Randomizes the digits of this <code>ApInt</code> inplace using the given\nrandom number generator.</p>\n<p>This wonโt change its <code>BitWidth</code>.</p>\n</div></details></div></details>",0,"cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#403\">source</a><a href=\"#impl-Add%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#406\">source</a><a href=\"#method.add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<section id=\"impl-Sync-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/mod.rs.html#46\">source</a><a href=\"#impl-Sync-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section><div class=\"docblock\"><p><code>ApInt</code> is safe to share between threads since it does not own\naliasing memory and has no mutable internal state like <code>Cell</code> or <code>RefCell</code>.</p>\n</div>","Sync","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Width-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#72\">source</a><a href=\"#impl-Width-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/crate/apint/0.2.0/apint/traits/trait.Width.html\" title=\"trait apint::traits::Width\">Width</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.width\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#75\">source</a><a href=\"#method.width\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/crate/apint/0.2.0/apint/traits/trait.Width.html#tymethod.width\" class=\"fn\">width</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/bitwidth/struct.BitWidth.html\" title=\"struct apint::bitwidth::BitWidth\">BitWidth</a></h4></section></summary><div class=\"docblock\"><p>Returns the <code>BitWidth</code> of this <code>ApInt</code>.</p>\n</div></details></div></details>","Width","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#11\">source</a><a href=\"#impl-Clone-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/casting.rs.html#12\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#419\">source</a><a href=\"#impl-AddAssign%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#420\">source</a><a href=\"#method.add_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#471\">source</a><a href=\"#impl-MulAssign%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#472\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#38\">source</a><a href=\"#impl-LowerHex-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#39\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#13\">source</a><a href=\"#impl-PartialEq-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#14\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#28\">source</a><a href=\"#impl-Octal-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#29\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#25\">source</a><a href=\"#impl-Hash-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#26\">source</a><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#434\">source</a><a href=\"#impl-BitXorAssign%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#435\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#374\">source</a><a href=\"#impl-Neg-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#377\">source</a><a href=\"#method.neg\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" title=\"type core::ops::arith::Neg::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#428\">source</a><a href=\"#impl-BitOrAssign%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#429\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#16\">source</a><a href=\"#impl-Debug-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/utils.rs.html#17\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#445\">source</a><a href=\"#impl-SubAssign%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#446\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<section id=\"impl-Eq-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/relational.rs.html#22\">source</a><a href=\"#impl-Eq-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section>","Eq","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#34\">source</a><a href=\"#impl-Drop-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#35\">source</a><a href=\"#method.drop\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#326\">source</a><a href=\"#impl-Not-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#329\">source</a><a href=\"#method.not\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" title=\"type core::ops::bit::Not::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#429\">source</a><a href=\"#impl-Sub%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#432\">source</a><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#455\">source</a><a href=\"#impl-Mul%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/arithmetic.rs.html#458\">source</a><a href=\"#method.mul\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#394\">source</a><a href=\"#impl-BitXor%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#397\">source</a><a href=\"#method.bitxor\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+8%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#373\">source</a><a href=\"#impl-From%3C%5Bi64;+8%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#373\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 8]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+2%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#367\">source</a><a href=\"#impl-From%3C%5Bi64;+2%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">2</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#367\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">2</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 2]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#279\">source</a><a href=\"#impl-From%3Ci8%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#281\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i8>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#272\">source</a><a href=\"#impl-From%3Cu8%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#274\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u8>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+7%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#372\">source</a><a href=\"#impl-From%3C%5Bu64;+7%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">7</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#372\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">7</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 7]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CB%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#263-264\">source</a><a href=\"#impl-From%3CB%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;B&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a><span class=\"where fmt-newline\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://docs.rs/crate/apint/0.2.0/apint/digit/enum.Bit.html\" title=\"enum apint::digit::Bit\">Bit</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#267\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bit: B) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<B>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+5%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#370\">source</a><a href=\"#impl-From%3C%5Bu64;+5%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">5</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#370\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">5</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 5]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+7%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#372\">source</a><a href=\"#impl-From%3C%5Bi64;+7%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">7</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#372\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">7</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 7]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu128%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#328\">source</a><a href=\"#impl-From%3Cu128%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#330\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u128>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#286\">source</a><a href=\"#impl-From%3Cu16%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#288\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u16>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+5%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#370\">source</a><a href=\"#impl-From%3C%5Bi64;+5%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">5</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#370\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">5</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 5]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#307\">source</a><a href=\"#impl-From%3Ci32%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#309\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i32>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#293\">source</a><a href=\"#impl-From%3Ci16%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#295\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i16>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#300\">source</a><a href=\"#impl-From%3Cu32%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#302\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u32>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci128%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#335\">source</a><a href=\"#impl-From%3Ci128%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#337\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i128>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+6%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#371\">source</a><a href=\"#impl-From%3C%5Bu64;+6%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">6</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#371\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">6</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 6]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+2%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#367\">source</a><a href=\"#impl-From%3C%5Bu64;+2%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">2</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#367\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">2</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 2]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+3%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#368\">source</a><a href=\"#impl-From%3C%5Bu64;+3%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">3</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#368\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">3</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 3]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+32%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#375\">source</a><a href=\"#impl-From%3C%5Bu64;+32%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">32</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#375\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">32</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 32]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#314\">source</a><a href=\"#impl-From%3Cu64%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#316\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci64%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#321\">source</a><a href=\"#impl-From%3Ci64%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#323\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i64>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+4%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#369\">source</a><a href=\"#impl-From%3C%5Bu64;+4%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">4</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#369\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">4</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 4]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+3%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#368\">source</a><a href=\"#impl-From%3C%5Bi64;+3%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">3</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#368\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">3</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 3]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+32%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#375\">source</a><a href=\"#impl-From%3C%5Bi64;+32%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">32</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#375\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">32</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 32]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+6%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#371\">source</a><a href=\"#impl-From%3C%5Bi64;+6%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">6</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#371\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">6</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 6]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+4%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#369\">source</a><a href=\"#impl-From%3C%5Bi64;+4%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">4</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#369\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">4</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 4]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+8%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#373\">source</a><a href=\"#impl-From%3C%5Bu64;+8%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#373\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 8]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu64;+16%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#374\">source</a><a href=\"#impl-From%3C%5Bu64;+16%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">16</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#374\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u64; 16]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bi64;+16%5D%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#374\">source</a><a href=\"#impl-From%3C%5Bi64;+16%5D%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">16</a>]&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/constructors.rs.html#374\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[i64; 16]>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#422\">source</a><a href=\"#impl-BitAndAssign%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#423\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serde_impl.rs.html#36\">source</a><a href=\"#impl-Serialize-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serde_impl.rs.html#37-38\">source</a><a href=\"#method.serialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</span></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serde_impl.rs.html#151\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serde_impl.rs.html#152-153\">source</a><a href=\"#method.deserialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#58\">source</a><a href=\"#impl-UpperHex-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#59\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#338\">source</a><a href=\"#impl-BitAnd%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#341\">source</a><a href=\"#method.bitand\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26ApInt%3E-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#366\">source</a><a href=\"#impl-BitOr%3C%26ApInt%3E-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/bitwise.rs.html#369\">source</a><a href=\"#method.bitor\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>) -&gt; &lt;<a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<&'a ApInt>","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<section id=\"impl-Send-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/mod.rs.html#42\">source</a><a href=\"#impl-Send-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section><div class=\"docblock\"><p><code>ApInt</code> is safe to send between threads since it does not own\naliasing memory and has no reference counting mechanism like <code>Rc</code>.</p>\n</div>","Send","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-ApInt\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#8\">source</a><a href=\"#impl-Binary-for-ApInt\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"https://docs.rs/crate/apint/0.2.0/apint/apint/struct.ApInt.html\" title=\"struct apint::apint::ApInt\">ApInt</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/apint/0.2.0/src/apint/apint/serialization.rs.html#9\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","cwe_checker_lib::intermediate_representation::bitvector::Bitvector"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()